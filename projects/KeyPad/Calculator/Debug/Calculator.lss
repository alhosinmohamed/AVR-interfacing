
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  000022c4  00002338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000019e0  00000000  00000000  00002368  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c2d  00000000  00000000  00003d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004975  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004c25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000686e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007759  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008508  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000088f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000090c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 65 0f 	call	0x1eca	; 0x1eca <main>
      7a:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	af e6       	ldi	r26, 0x6F	; 111
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8f e6       	ldi	r24, 0x6F	; 111
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <Dio_voidSetPinDirection>:
#include "Dio_Private.h"
#include "Dio_Cfg.h"
#include "Dio_Reg.h"


void Dio_voidSetPinDirection (u8 Cpy_u8Port , u8 Cpy_u8Pin , u8 Cpy_u8Dirc){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
	if (Cpy_u8Dirc == DIO_INPUT)
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	88 23       	and	r24, r24
     b54:	09 f0       	breq	.+2      	; 0xb58 <Dio_voidSetPinDirection+0x22>
     b56:	74 c0       	rjmp	.+232    	; 0xc40 <Dio_voidSetPinDirection+0x10a>
	{
		switch (Cpy_u8Port){
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	3f 83       	std	Y+7, r19	; 0x07
     b60:	2e 83       	std	Y+6, r18	; 0x06
     b62:	8e 81       	ldd	r24, Y+6	; 0x06
     b64:	9f 81       	ldd	r25, Y+7	; 0x07
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	91 05       	cpc	r25, r1
     b6a:	59 f1       	breq	.+86     	; 0xbc2 <Dio_voidSetPinDirection+0x8c>
     b6c:	2e 81       	ldd	r18, Y+6	; 0x06
     b6e:	3f 81       	ldd	r19, Y+7	; 0x07
     b70:	22 30       	cpi	r18, 0x02	; 2
     b72:	31 05       	cpc	r19, r1
     b74:	2c f4       	brge	.+10     	; 0xb80 <Dio_voidSetPinDirection+0x4a>
     b76:	8e 81       	ldd	r24, Y+6	; 0x06
     b78:	9f 81       	ldd	r25, Y+7	; 0x07
     b7a:	00 97       	sbiw	r24, 0x00	; 0
     b7c:	69 f0       	breq	.+26     	; 0xb98 <Dio_voidSetPinDirection+0x62>
     b7e:	d2 c0       	rjmp	.+420    	; 0xd24 <Dio_voidSetPinDirection+0x1ee>
     b80:	2e 81       	ldd	r18, Y+6	; 0x06
     b82:	3f 81       	ldd	r19, Y+7	; 0x07
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	89 f1       	breq	.+98     	; 0xbec <Dio_voidSetPinDirection+0xb6>
     b8a:	8e 81       	ldd	r24, Y+6	; 0x06
     b8c:	9f 81       	ldd	r25, Y+7	; 0x07
     b8e:	83 30       	cpi	r24, 0x03	; 3
     b90:	91 05       	cpc	r25, r1
     b92:	09 f4       	brne	.+2      	; 0xb96 <Dio_voidSetPinDirection+0x60>
     b94:	40 c0       	rjmp	.+128    	; 0xc16 <Dio_voidSetPinDirection+0xe0>
     b96:	c6 c0       	rjmp	.+396    	; 0xd24 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTA : clear_Bit(DDRA , Cpy_u8Pin) ; break;
     b98:	aa e3       	ldi	r26, 0x3A	; 58
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	ea e3       	ldi	r30, 0x3A	; 58
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	48 2f       	mov	r20, r24
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	28 2f       	mov	r18, r24
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	02 2e       	mov	r0, r18
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <Dio_voidSetPinDirection+0x80>
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	0a 94       	dec	r0
     bb8:	e2 f7       	brpl	.-8      	; 0xbb2 <Dio_voidSetPinDirection+0x7c>
     bba:	80 95       	com	r24
     bbc:	84 23       	and	r24, r20
     bbe:	8c 93       	st	X, r24
     bc0:	b1 c0       	rjmp	.+354    	; 0xd24 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTB : clear_Bit(DDRB , Cpy_u8Pin); break;
     bc2:	a7 e3       	ldi	r26, 0x37	; 55
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e7 e3       	ldi	r30, 0x37	; 55
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	48 2f       	mov	r20, r24
     bce:	8a 81       	ldd	r24, Y+2	; 0x02
     bd0:	28 2f       	mov	r18, r24
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	02 2e       	mov	r0, r18
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <Dio_voidSetPinDirection+0xaa>
     bdc:	88 0f       	add	r24, r24
     bde:	99 1f       	adc	r25, r25
     be0:	0a 94       	dec	r0
     be2:	e2 f7       	brpl	.-8      	; 0xbdc <Dio_voidSetPinDirection+0xa6>
     be4:	80 95       	com	r24
     be6:	84 23       	and	r24, r20
     be8:	8c 93       	st	X, r24
     bea:	9c c0       	rjmp	.+312    	; 0xd24 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTC : clear_Bit(DDRC , Cpy_u8Pin); break;
     bec:	a4 e3       	ldi	r26, 0x34	; 52
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e4 e3       	ldi	r30, 0x34	; 52
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	48 2f       	mov	r20, r24
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	02 2e       	mov	r0, r18
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <Dio_voidSetPinDirection+0xd4>
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	0a 94       	dec	r0
     c0c:	e2 f7       	brpl	.-8      	; 0xc06 <Dio_voidSetPinDirection+0xd0>
     c0e:	80 95       	com	r24
     c10:	84 23       	and	r24, r20
     c12:	8c 93       	st	X, r24
     c14:	87 c0       	rjmp	.+270    	; 0xd24 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTD : clear_Bit(DDRD , Cpy_u8Pin); break;
     c16:	a1 e3       	ldi	r26, 0x31	; 49
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	e1 e3       	ldi	r30, 0x31	; 49
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	48 2f       	mov	r20, r24
     c22:	8a 81       	ldd	r24, Y+2	; 0x02
     c24:	28 2f       	mov	r18, r24
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	02 2e       	mov	r0, r18
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <Dio_voidSetPinDirection+0xfe>
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	0a 94       	dec	r0
     c36:	e2 f7       	brpl	.-8      	; 0xc30 <Dio_voidSetPinDirection+0xfa>
     c38:	80 95       	com	r24
     c3a:	84 23       	and	r24, r20
     c3c:	8c 93       	st	X, r24
     c3e:	72 c0       	rjmp	.+228    	; 0xd24 <Dio_voidSetPinDirection+0x1ee>
		}
	}
	else if (Cpy_u8Dirc == DIO_OUTPUT){
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	81 30       	cpi	r24, 0x01	; 1
     c44:	09 f0       	breq	.+2      	; 0xc48 <Dio_voidSetPinDirection+0x112>
     c46:	6e c0       	rjmp	.+220    	; 0xd24 <Dio_voidSetPinDirection+0x1ee>
		switch (Cpy_u8Port){
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	3d 83       	std	Y+5, r19	; 0x05
     c50:	2c 83       	std	Y+4, r18	; 0x04
     c52:	8c 81       	ldd	r24, Y+4	; 0x04
     c54:	9d 81       	ldd	r25, Y+5	; 0x05
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	91 05       	cpc	r25, r1
     c5a:	49 f1       	breq	.+82     	; 0xcae <Dio_voidSetPinDirection+0x178>
     c5c:	2c 81       	ldd	r18, Y+4	; 0x04
     c5e:	3d 81       	ldd	r19, Y+5	; 0x05
     c60:	22 30       	cpi	r18, 0x02	; 2
     c62:	31 05       	cpc	r19, r1
     c64:	2c f4       	brge	.+10     	; 0xc70 <Dio_voidSetPinDirection+0x13a>
     c66:	8c 81       	ldd	r24, Y+4	; 0x04
     c68:	9d 81       	ldd	r25, Y+5	; 0x05
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	61 f0       	breq	.+24     	; 0xc86 <Dio_voidSetPinDirection+0x150>
     c6e:	5a c0       	rjmp	.+180    	; 0xd24 <Dio_voidSetPinDirection+0x1ee>
     c70:	2c 81       	ldd	r18, Y+4	; 0x04
     c72:	3d 81       	ldd	r19, Y+5	; 0x05
     c74:	22 30       	cpi	r18, 0x02	; 2
     c76:	31 05       	cpc	r19, r1
     c78:	71 f1       	breq	.+92     	; 0xcd6 <Dio_voidSetPinDirection+0x1a0>
     c7a:	8c 81       	ldd	r24, Y+4	; 0x04
     c7c:	9d 81       	ldd	r25, Y+5	; 0x05
     c7e:	83 30       	cpi	r24, 0x03	; 3
     c80:	91 05       	cpc	r25, r1
     c82:	e9 f1       	breq	.+122    	; 0xcfe <Dio_voidSetPinDirection+0x1c8>
     c84:	4f c0       	rjmp	.+158    	; 0xd24 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTA : set_Bit(DDRA , Cpy_u8Pin) ; break;
     c86:	aa e3       	ldi	r26, 0x3A	; 58
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	ea e3       	ldi	r30, 0x3A	; 58
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	48 2f       	mov	r20, r24
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 2e       	mov	r0, r18
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <Dio_voidSetPinDirection+0x16e>
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	0a 94       	dec	r0
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <Dio_voidSetPinDirection+0x16a>
     ca8:	84 2b       	or	r24, r20
     caa:	8c 93       	st	X, r24
     cac:	3b c0       	rjmp	.+118    	; 0xd24 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTB : set_Bit(DDRB , Cpy_u8Pin); break;
     cae:	a7 e3       	ldi	r26, 0x37	; 55
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e7 e3       	ldi	r30, 0x37	; 55
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	48 2f       	mov	r20, r24
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 2e       	mov	r0, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <Dio_voidSetPinDirection+0x196>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	0a 94       	dec	r0
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <Dio_voidSetPinDirection+0x192>
     cd0:	84 2b       	or	r24, r20
     cd2:	8c 93       	st	X, r24
     cd4:	27 c0       	rjmp	.+78     	; 0xd24 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTC : set_Bit(DDRC , Cpy_u8Pin); break;
     cd6:	a4 e3       	ldi	r26, 0x34	; 52
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e4 e3       	ldi	r30, 0x34	; 52
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 2e       	mov	r0, r18
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <Dio_voidSetPinDirection+0x1be>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <Dio_voidSetPinDirection+0x1ba>
     cf8:	84 2b       	or	r24, r20
     cfa:	8c 93       	st	X, r24
     cfc:	13 c0       	rjmp	.+38     	; 0xd24 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTD : set_Bit(DDRD , Cpy_u8Pin); break;
     cfe:	a1 e3       	ldi	r26, 0x31	; 49
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e1 e3       	ldi	r30, 0x31	; 49
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <Dio_voidSetPinDirection+0x1e6>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <Dio_voidSetPinDirection+0x1e2>
     d20:	84 2b       	or	r24, r20
     d22:	8c 93       	st	X, r24
		}
	}
}
     d24:	27 96       	adiw	r28, 0x07	; 7
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	08 95       	ret

00000d36 <Dio_voidSetPinValue>:
void Dio_voidSetPinValue (u8 Cpy_u8Port , u8 Cpy_u8Pin , u8 Cpy_u8Value){
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	27 97       	sbiw	r28, 0x07	; 7
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	6a 83       	std	Y+2, r22	; 0x02
     d4e:	4b 83       	std	Y+3, r20	; 0x03
	if (Cpy_u8Value == DIO_LOW)
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	88 23       	and	r24, r24
     d54:	09 f0       	breq	.+2      	; 0xd58 <Dio_voidSetPinValue+0x22>
     d56:	74 c0       	rjmp	.+232    	; 0xe40 <Dio_voidSetPinValue+0x10a>
	{
		switch (Cpy_u8Port){
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	3f 83       	std	Y+7, r19	; 0x07
     d60:	2e 83       	std	Y+6, r18	; 0x06
     d62:	8e 81       	ldd	r24, Y+6	; 0x06
     d64:	9f 81       	ldd	r25, Y+7	; 0x07
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	91 05       	cpc	r25, r1
     d6a:	59 f1       	breq	.+86     	; 0xdc2 <Dio_voidSetPinValue+0x8c>
     d6c:	2e 81       	ldd	r18, Y+6	; 0x06
     d6e:	3f 81       	ldd	r19, Y+7	; 0x07
     d70:	22 30       	cpi	r18, 0x02	; 2
     d72:	31 05       	cpc	r19, r1
     d74:	2c f4       	brge	.+10     	; 0xd80 <Dio_voidSetPinValue+0x4a>
     d76:	8e 81       	ldd	r24, Y+6	; 0x06
     d78:	9f 81       	ldd	r25, Y+7	; 0x07
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	69 f0       	breq	.+26     	; 0xd98 <Dio_voidSetPinValue+0x62>
     d7e:	d2 c0       	rjmp	.+420    	; 0xf24 <Dio_voidSetPinValue+0x1ee>
     d80:	2e 81       	ldd	r18, Y+6	; 0x06
     d82:	3f 81       	ldd	r19, Y+7	; 0x07
     d84:	22 30       	cpi	r18, 0x02	; 2
     d86:	31 05       	cpc	r19, r1
     d88:	89 f1       	breq	.+98     	; 0xdec <Dio_voidSetPinValue+0xb6>
     d8a:	8e 81       	ldd	r24, Y+6	; 0x06
     d8c:	9f 81       	ldd	r25, Y+7	; 0x07
     d8e:	83 30       	cpi	r24, 0x03	; 3
     d90:	91 05       	cpc	r25, r1
     d92:	09 f4       	brne	.+2      	; 0xd96 <Dio_voidSetPinValue+0x60>
     d94:	40 c0       	rjmp	.+128    	; 0xe16 <Dio_voidSetPinValue+0xe0>
     d96:	c6 c0       	rjmp	.+396    	; 0xf24 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTA : clear_Bit(PORTA , Cpy_u8Pin) ; break;
     d98:	ab e3       	ldi	r26, 0x3B	; 59
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	eb e3       	ldi	r30, 0x3B	; 59
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	48 2f       	mov	r20, r24
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	02 2e       	mov	r0, r18
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <Dio_voidSetPinValue+0x80>
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <Dio_voidSetPinValue+0x7c>
     dba:	80 95       	com	r24
     dbc:	84 23       	and	r24, r20
     dbe:	8c 93       	st	X, r24
     dc0:	b1 c0       	rjmp	.+354    	; 0xf24 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTB : clear_Bit(PORTB , Cpy_u8Pin); break;
     dc2:	a8 e3       	ldi	r26, 0x38	; 56
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e8 e3       	ldi	r30, 0x38	; 56
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	48 2f       	mov	r20, r24
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 2e       	mov	r0, r18
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <Dio_voidSetPinValue+0xaa>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	0a 94       	dec	r0
     de2:	e2 f7       	brpl	.-8      	; 0xddc <Dio_voidSetPinValue+0xa6>
     de4:	80 95       	com	r24
     de6:	84 23       	and	r24, r20
     de8:	8c 93       	st	X, r24
     dea:	9c c0       	rjmp	.+312    	; 0xf24 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTC : clear_Bit(PORTC , Cpy_u8Pin); break;
     dec:	a5 e3       	ldi	r26, 0x35	; 53
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e5 e3       	ldi	r30, 0x35	; 53
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 2e       	mov	r0, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <Dio_voidSetPinValue+0xd4>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <Dio_voidSetPinValue+0xd0>
     e0e:	80 95       	com	r24
     e10:	84 23       	and	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	87 c0       	rjmp	.+270    	; 0xf24 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTD : clear_Bit(PORTD , Cpy_u8Pin); break;
     e16:	a2 e3       	ldi	r26, 0x32	; 50
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e2 e3       	ldi	r30, 0x32	; 50
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <Dio_voidSetPinValue+0xfe>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <Dio_voidSetPinValue+0xfa>
     e38:	80 95       	com	r24
     e3a:	84 23       	and	r24, r20
     e3c:	8c 93       	st	X, r24
     e3e:	72 c0       	rjmp	.+228    	; 0xf24 <Dio_voidSetPinValue+0x1ee>
		}
	}
	else if (Cpy_u8Value == DIO_HIGH){
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	81 30       	cpi	r24, 0x01	; 1
     e44:	09 f0       	breq	.+2      	; 0xe48 <Dio_voidSetPinValue+0x112>
     e46:	6e c0       	rjmp	.+220    	; 0xf24 <Dio_voidSetPinValue+0x1ee>
		switch (Cpy_u8Port){
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	3d 83       	std	Y+5, r19	; 0x05
     e50:	2c 83       	std	Y+4, r18	; 0x04
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	9d 81       	ldd	r25, Y+5	; 0x05
     e56:	81 30       	cpi	r24, 0x01	; 1
     e58:	91 05       	cpc	r25, r1
     e5a:	49 f1       	breq	.+82     	; 0xeae <Dio_voidSetPinValue+0x178>
     e5c:	2c 81       	ldd	r18, Y+4	; 0x04
     e5e:	3d 81       	ldd	r19, Y+5	; 0x05
     e60:	22 30       	cpi	r18, 0x02	; 2
     e62:	31 05       	cpc	r19, r1
     e64:	2c f4       	brge	.+10     	; 0xe70 <Dio_voidSetPinValue+0x13a>
     e66:	8c 81       	ldd	r24, Y+4	; 0x04
     e68:	9d 81       	ldd	r25, Y+5	; 0x05
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	61 f0       	breq	.+24     	; 0xe86 <Dio_voidSetPinValue+0x150>
     e6e:	5a c0       	rjmp	.+180    	; 0xf24 <Dio_voidSetPinValue+0x1ee>
     e70:	2c 81       	ldd	r18, Y+4	; 0x04
     e72:	3d 81       	ldd	r19, Y+5	; 0x05
     e74:	22 30       	cpi	r18, 0x02	; 2
     e76:	31 05       	cpc	r19, r1
     e78:	71 f1       	breq	.+92     	; 0xed6 <Dio_voidSetPinValue+0x1a0>
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	9d 81       	ldd	r25, Y+5	; 0x05
     e7e:	83 30       	cpi	r24, 0x03	; 3
     e80:	91 05       	cpc	r25, r1
     e82:	e9 f1       	breq	.+122    	; 0xefe <Dio_voidSetPinValue+0x1c8>
     e84:	4f c0       	rjmp	.+158    	; 0xf24 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTA : set_Bit(PORTA , Cpy_u8Pin) ; break;
     e86:	ab e3       	ldi	r26, 0x3B	; 59
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	eb e3       	ldi	r30, 0x3B	; 59
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <Dio_voidSetPinValue+0x16e>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <Dio_voidSetPinValue+0x16a>
     ea8:	84 2b       	or	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	3b c0       	rjmp	.+118    	; 0xf24 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTB : set_Bit(PORTB , Cpy_u8Pin); break;
     eae:	a8 e3       	ldi	r26, 0x38	; 56
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e8 e3       	ldi	r30, 0x38	; 56
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <Dio_voidSetPinValue+0x196>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <Dio_voidSetPinValue+0x192>
     ed0:	84 2b       	or	r24, r20
     ed2:	8c 93       	st	X, r24
     ed4:	27 c0       	rjmp	.+78     	; 0xf24 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTC : set_Bit(PORTC , Cpy_u8Pin); break;
     ed6:	a5 e3       	ldi	r26, 0x35	; 53
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e5 e3       	ldi	r30, 0x35	; 53
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <Dio_voidSetPinValue+0x1be>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <Dio_voidSetPinValue+0x1ba>
     ef8:	84 2b       	or	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	13 c0       	rjmp	.+38     	; 0xf24 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTD : set_Bit(PORTD , Cpy_u8Pin); break;
     efe:	a2 e3       	ldi	r26, 0x32	; 50
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e2 e3       	ldi	r30, 0x32	; 50
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <Dio_voidSetPinValue+0x1e6>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <Dio_voidSetPinValue+0x1e2>
     f20:	84 2b       	or	r24, r20
     f22:	8c 93       	st	X, r24
		}
	}
}
     f24:	27 96       	adiw	r28, 0x07	; 7
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <Dio_u8GetPinValue>:
u8 Dio_u8GetPinValue (u8 Cpy_u8Port , u8 Cpy_u8Pin){
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <Dio_u8GetPinValue+0x6>
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <Dio_u8GetPinValue+0x8>
     f3e:	0f 92       	push	r0
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	8a 83       	std	Y+2, r24	; 0x02
     f46:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8InValue = 0 ;
     f48:	19 82       	std	Y+1, r1	; 0x01
	switch (Cpy_u8Port){
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	3d 83       	std	Y+5, r19	; 0x05
     f52:	2c 83       	std	Y+4, r18	; 0x04
     f54:	4c 81       	ldd	r20, Y+4	; 0x04
     f56:	5d 81       	ldd	r21, Y+5	; 0x05
     f58:	41 30       	cpi	r20, 0x01	; 1
     f5a:	51 05       	cpc	r21, r1
     f5c:	41 f1       	breq	.+80     	; 0xfae <Dio_u8GetPinValue+0x78>
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	9d 81       	ldd	r25, Y+5	; 0x05
     f62:	82 30       	cpi	r24, 0x02	; 2
     f64:	91 05       	cpc	r25, r1
     f66:	34 f4       	brge	.+12     	; 0xf74 <Dio_u8GetPinValue+0x3e>
     f68:	2c 81       	ldd	r18, Y+4	; 0x04
     f6a:	3d 81       	ldd	r19, Y+5	; 0x05
     f6c:	21 15       	cp	r18, r1
     f6e:	31 05       	cpc	r19, r1
     f70:	61 f0       	breq	.+24     	; 0xf8a <Dio_u8GetPinValue+0x54>
     f72:	52 c0       	rjmp	.+164    	; 0x1018 <Dio_u8GetPinValue+0xe2>
     f74:	4c 81       	ldd	r20, Y+4	; 0x04
     f76:	5d 81       	ldd	r21, Y+5	; 0x05
     f78:	42 30       	cpi	r20, 0x02	; 2
     f7a:	51 05       	cpc	r21, r1
     f7c:	51 f1       	breq	.+84     	; 0xfd2 <Dio_u8GetPinValue+0x9c>
     f7e:	8c 81       	ldd	r24, Y+4	; 0x04
     f80:	9d 81       	ldd	r25, Y+5	; 0x05
     f82:	83 30       	cpi	r24, 0x03	; 3
     f84:	91 05       	cpc	r25, r1
     f86:	b9 f1       	breq	.+110    	; 0xff6 <Dio_u8GetPinValue+0xc0>
     f88:	47 c0       	rjmp	.+142    	; 0x1018 <Dio_u8GetPinValue+0xe2>
	 case DIO_PORTA : local_u8InValue = get_Bit(PINA , Cpy_u8Pin) ; break;
     f8a:	e9 e3       	ldi	r30, 0x39	; 57
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	a9 01       	movw	r20, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <Dio_u8GetPinValue+0x6c>
     f9e:	55 95       	asr	r21
     fa0:	47 95       	ror	r20
     fa2:	8a 95       	dec	r24
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <Dio_u8GetPinValue+0x68>
     fa6:	ca 01       	movw	r24, r20
     fa8:	81 70       	andi	r24, 0x01	; 1
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	35 c0       	rjmp	.+106    	; 0x1018 <Dio_u8GetPinValue+0xe2>
	 case DIO_PORTB : local_u8InValue = get_Bit(PINB , Cpy_u8Pin); break;
     fae:	e6 e3       	ldi	r30, 0x36	; 54
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	88 2f       	mov	r24, r24
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	a9 01       	movw	r20, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <Dio_u8GetPinValue+0x90>
     fc2:	55 95       	asr	r21
     fc4:	47 95       	ror	r20
     fc6:	8a 95       	dec	r24
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <Dio_u8GetPinValue+0x8c>
     fca:	ca 01       	movw	r24, r20
     fcc:	81 70       	andi	r24, 0x01	; 1
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	23 c0       	rjmp	.+70     	; 0x1018 <Dio_u8GetPinValue+0xe2>
	 case DIO_PORTC : local_u8InValue = get_Bit(PINC , Cpy_u8Pin); break;
     fd2:	e3 e3       	ldi	r30, 0x33	; 51
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	a9 01       	movw	r20, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <Dio_u8GetPinValue+0xb4>
     fe6:	55 95       	asr	r21
     fe8:	47 95       	ror	r20
     fea:	8a 95       	dec	r24
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <Dio_u8GetPinValue+0xb0>
     fee:	ca 01       	movw	r24, r20
     ff0:	81 70       	andi	r24, 0x01	; 1
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	11 c0       	rjmp	.+34     	; 0x1018 <Dio_u8GetPinValue+0xe2>
	 case DIO_PORTD : local_u8InValue = get_Bit(PIND , Cpy_u8Pin); break;
     ff6:	e0 e3       	ldi	r30, 0x30	; 48
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	a9 01       	movw	r20, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <Dio_u8GetPinValue+0xd8>
    100a:	55 95       	asr	r21
    100c:	47 95       	ror	r20
    100e:	8a 95       	dec	r24
    1010:	e2 f7       	brpl	.-8      	; 0x100a <Dio_u8GetPinValue+0xd4>
    1012:	ca 01       	movw	r24, r20
    1014:	81 70       	andi	r24, 0x01	; 1
    1016:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_u8InValue ;
    1018:	89 81       	ldd	r24, Y+1	; 0x01
}
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <Dio_voidSetPortDirection>:


void Dio_voidSetPortDirection (u8 Cpy_u8Port , u8 Cpy_u8Dirc)
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	00 d0       	rcall	.+0      	; 0x1030 <Dio_voidSetPortDirection+0x6>
    1030:	00 d0       	rcall	.+0      	; 0x1032 <Dio_voidSetPortDirection+0x8>
    1032:	00 d0       	rcall	.+0      	; 0x1034 <Dio_voidSetPortDirection+0xa>
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	89 83       	std	Y+1, r24	; 0x01
    103a:	6a 83       	std	Y+2, r22	; 0x02
	if (Cpy_u8Dirc == DIO_INPUT)
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	88 23       	and	r24, r24
    1040:	79 f5       	brne	.+94     	; 0x10a0 <Dio_voidSetPortDirection+0x76>
	{
		switch (Cpy_u8Port)
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	3e 83       	std	Y+6, r19	; 0x06
    104a:	2d 83       	std	Y+5, r18	; 0x05
    104c:	8d 81       	ldd	r24, Y+5	; 0x05
    104e:	9e 81       	ldd	r25, Y+6	; 0x06
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	91 05       	cpc	r25, r1
    1054:	c9 f0       	breq	.+50     	; 0x1088 <Dio_voidSetPortDirection+0x5e>
    1056:	2d 81       	ldd	r18, Y+5	; 0x05
    1058:	3e 81       	ldd	r19, Y+6	; 0x06
    105a:	22 30       	cpi	r18, 0x02	; 2
    105c:	31 05       	cpc	r19, r1
    105e:	2c f4       	brge	.+10     	; 0x106a <Dio_voidSetPortDirection+0x40>
    1060:	8d 81       	ldd	r24, Y+5	; 0x05
    1062:	9e 81       	ldd	r25, Y+6	; 0x06
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	61 f0       	breq	.+24     	; 0x1080 <Dio_voidSetPortDirection+0x56>
    1068:	50 c0       	rjmp	.+160    	; 0x110a <Dio_voidSetPortDirection+0xe0>
    106a:	2d 81       	ldd	r18, Y+5	; 0x05
    106c:	3e 81       	ldd	r19, Y+6	; 0x06
    106e:	22 30       	cpi	r18, 0x02	; 2
    1070:	31 05       	cpc	r19, r1
    1072:	71 f0       	breq	.+28     	; 0x1090 <Dio_voidSetPortDirection+0x66>
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	83 30       	cpi	r24, 0x03	; 3
    107a:	91 05       	cpc	r25, r1
    107c:	69 f0       	breq	.+26     	; 0x1098 <Dio_voidSetPortDirection+0x6e>
    107e:	45 c0       	rjmp	.+138    	; 0x110a <Dio_voidSetPortDirection+0xe0>
		{
		 case DIO_PORTA : DDRA = 0x00 ; break;
    1080:	ea e3       	ldi	r30, 0x3A	; 58
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	10 82       	st	Z, r1
    1086:	41 c0       	rjmp	.+130    	; 0x110a <Dio_voidSetPortDirection+0xe0>
		 case DIO_PORTB : DDRB = 0x00 ; break;
    1088:	e7 e3       	ldi	r30, 0x37	; 55
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	10 82       	st	Z, r1
    108e:	3d c0       	rjmp	.+122    	; 0x110a <Dio_voidSetPortDirection+0xe0>
		 case DIO_PORTC : DDRC = 0x00 ; break;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	10 82       	st	Z, r1
    1096:	39 c0       	rjmp	.+114    	; 0x110a <Dio_voidSetPortDirection+0xe0>
		 case DIO_PORTD : DDRD = 0x00 ; break;
    1098:	e1 e3       	ldi	r30, 0x31	; 49
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	10 82       	st	Z, r1
    109e:	35 c0       	rjmp	.+106    	; 0x110a <Dio_voidSetPortDirection+0xe0>
		}
	}
	else if (Cpy_u8Dirc == DIO_OUTPUT)
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	91 f5       	brne	.+100    	; 0x110a <Dio_voidSetPortDirection+0xe0>
	{
		switch (Cpy_u8Port)
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	3c 83       	std	Y+4, r19	; 0x04
    10ae:	2b 83       	std	Y+3, r18	; 0x03
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	9c 81       	ldd	r25, Y+4	; 0x04
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	91 05       	cpc	r25, r1
    10b8:	d1 f0       	breq	.+52     	; 0x10ee <Dio_voidSetPortDirection+0xc4>
    10ba:	2b 81       	ldd	r18, Y+3	; 0x03
    10bc:	3c 81       	ldd	r19, Y+4	; 0x04
    10be:	22 30       	cpi	r18, 0x02	; 2
    10c0:	31 05       	cpc	r19, r1
    10c2:	2c f4       	brge	.+10     	; 0x10ce <Dio_voidSetPortDirection+0xa4>
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	9c 81       	ldd	r25, Y+4	; 0x04
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	61 f0       	breq	.+24     	; 0x10e4 <Dio_voidSetPortDirection+0xba>
    10cc:	1e c0       	rjmp	.+60     	; 0x110a <Dio_voidSetPortDirection+0xe0>
    10ce:	2b 81       	ldd	r18, Y+3	; 0x03
    10d0:	3c 81       	ldd	r19, Y+4	; 0x04
    10d2:	22 30       	cpi	r18, 0x02	; 2
    10d4:	31 05       	cpc	r19, r1
    10d6:	81 f0       	breq	.+32     	; 0x10f8 <Dio_voidSetPortDirection+0xce>
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	83 30       	cpi	r24, 0x03	; 3
    10de:	91 05       	cpc	r25, r1
    10e0:	81 f0       	breq	.+32     	; 0x1102 <Dio_voidSetPortDirection+0xd8>
    10e2:	13 c0       	rjmp	.+38     	; 0x110a <Dio_voidSetPortDirection+0xe0>
		{
		 case DIO_PORTA : DDRA = 0XFF ; break;
    10e4:	ea e3       	ldi	r30, 0x3A	; 58
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	8f ef       	ldi	r24, 0xFF	; 255
    10ea:	80 83       	st	Z, r24
    10ec:	0e c0       	rjmp	.+28     	; 0x110a <Dio_voidSetPortDirection+0xe0>
		 case DIO_PORTB : DDRB = 0XFF ; break;
    10ee:	e7 e3       	ldi	r30, 0x37	; 55
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	8f ef       	ldi	r24, 0xFF	; 255
    10f4:	80 83       	st	Z, r24
    10f6:	09 c0       	rjmp	.+18     	; 0x110a <Dio_voidSetPortDirection+0xe0>
		 case DIO_PORTC : DDRC = 0XFF ; break;
    10f8:	e4 e3       	ldi	r30, 0x34	; 52
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	8f ef       	ldi	r24, 0xFF	; 255
    10fe:	80 83       	st	Z, r24
    1100:	04 c0       	rjmp	.+8      	; 0x110a <Dio_voidSetPortDirection+0xe0>
		 case DIO_PORTD : DDRD = 0XFF ; break;
    1102:	e1 e3       	ldi	r30, 0x31	; 49
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	8f ef       	ldi	r24, 0xFF	; 255
    1108:	80 83       	st	Z, r24
		}
	}
}
    110a:	26 96       	adiw	r28, 0x06	; 6
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <Dio_voidSetPortValue>:
void Dio_voidSetPortValue (u8 Cpy_u8Port , u8 Cpy_u8Value){
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <Dio_voidSetPortValue+0x6>
    1122:	00 d0       	rcall	.+0      	; 0x1124 <Dio_voidSetPortValue+0x8>
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	6a 83       	std	Y+2, r22	; 0x02
	switch (Cpy_u8Port)
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	3c 83       	std	Y+4, r19	; 0x04
    1134:	2b 83       	std	Y+3, r18	; 0x03
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	9c 81       	ldd	r25, Y+4	; 0x04
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	91 05       	cpc	r25, r1
    113e:	d1 f0       	breq	.+52     	; 0x1174 <Dio_voidSetPortValue+0x58>
    1140:	2b 81       	ldd	r18, Y+3	; 0x03
    1142:	3c 81       	ldd	r19, Y+4	; 0x04
    1144:	22 30       	cpi	r18, 0x02	; 2
    1146:	31 05       	cpc	r19, r1
    1148:	2c f4       	brge	.+10     	; 0x1154 <Dio_voidSetPortValue+0x38>
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	61 f0       	breq	.+24     	; 0x116a <Dio_voidSetPortValue+0x4e>
    1152:	1e c0       	rjmp	.+60     	; 0x1190 <Dio_voidSetPortValue+0x74>
    1154:	2b 81       	ldd	r18, Y+3	; 0x03
    1156:	3c 81       	ldd	r19, Y+4	; 0x04
    1158:	22 30       	cpi	r18, 0x02	; 2
    115a:	31 05       	cpc	r19, r1
    115c:	81 f0       	breq	.+32     	; 0x117e <Dio_voidSetPortValue+0x62>
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	83 30       	cpi	r24, 0x03	; 3
    1164:	91 05       	cpc	r25, r1
    1166:	81 f0       	breq	.+32     	; 0x1188 <Dio_voidSetPortValue+0x6c>
    1168:	13 c0       	rjmp	.+38     	; 0x1190 <Dio_voidSetPortValue+0x74>
	{
	 case DIO_PORTA : PORTA =  Cpy_u8Value; break;
    116a:	eb e3       	ldi	r30, 0x3B	; 59
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	80 83       	st	Z, r24
    1172:	0e c0       	rjmp	.+28     	; 0x1190 <Dio_voidSetPortValue+0x74>
	 case DIO_PORTB : PORTB =  Cpy_u8Value; break;
    1174:	e8 e3       	ldi	r30, 0x38	; 56
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	80 83       	st	Z, r24
    117c:	09 c0       	rjmp	.+18     	; 0x1190 <Dio_voidSetPortValue+0x74>
	 case DIO_PORTC : PORTC =  Cpy_u8Value; break;
    117e:	e5 e3       	ldi	r30, 0x35	; 53
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	80 83       	st	Z, r24
    1186:	04 c0       	rjmp	.+8      	; 0x1190 <Dio_voidSetPortValue+0x74>
	 case DIO_PORTD : PORTD =  Cpy_u8Value; break;
    1188:	e2 e3       	ldi	r30, 0x32	; 50
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	80 83       	st	Z, r24
	}

}
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <Dio_u8GetPortValue>:
u8 Dio_u8GetPortValue (u8 Cpy_u8Port){
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <Dio_u8GetPortValue+0x6>
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <Dio_u8GetPortValue+0x8>
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8InValue = 0 ;
    11ac:	19 82       	std	Y+1, r1	; 0x01
	switch (Cpy_u8Port){
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	3c 83       	std	Y+4, r19	; 0x04
    11b6:	2b 83       	std	Y+3, r18	; 0x03
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	9c 81       	ldd	r25, Y+4	; 0x04
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	91 05       	cpc	r25, r1
    11c0:	d1 f0       	breq	.+52     	; 0x11f6 <Dio_u8GetPortValue+0x58>
    11c2:	2b 81       	ldd	r18, Y+3	; 0x03
    11c4:	3c 81       	ldd	r19, Y+4	; 0x04
    11c6:	22 30       	cpi	r18, 0x02	; 2
    11c8:	31 05       	cpc	r19, r1
    11ca:	2c f4       	brge	.+10     	; 0x11d6 <Dio_u8GetPortValue+0x38>
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	9c 81       	ldd	r25, Y+4	; 0x04
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	61 f0       	breq	.+24     	; 0x11ec <Dio_u8GetPortValue+0x4e>
    11d4:	1e c0       	rjmp	.+60     	; 0x1212 <Dio_u8GetPortValue+0x74>
    11d6:	2b 81       	ldd	r18, Y+3	; 0x03
    11d8:	3c 81       	ldd	r19, Y+4	; 0x04
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	81 f0       	breq	.+32     	; 0x1200 <Dio_u8GetPortValue+0x62>
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	83 30       	cpi	r24, 0x03	; 3
    11e6:	91 05       	cpc	r25, r1
    11e8:	81 f0       	breq	.+32     	; 0x120a <Dio_u8GetPortValue+0x6c>
    11ea:	13 c0       	rjmp	.+38     	; 0x1212 <Dio_u8GetPortValue+0x74>
	 case DIO_PORTA : local_u8InValue = PINA ; break;
    11ec:	e9 e3       	ldi	r30, 0x39	; 57
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	0e c0       	rjmp	.+28     	; 0x1212 <Dio_u8GetPortValue+0x74>
	 case DIO_PORTB : local_u8InValue = PINB ; break;
    11f6:	e6 e3       	ldi	r30, 0x36	; 54
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	09 c0       	rjmp	.+18     	; 0x1212 <Dio_u8GetPortValue+0x74>
	 case DIO_PORTC : local_u8InValue = PINC ; break;
    1200:	e3 e3       	ldi	r30, 0x33	; 51
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	04 c0       	rjmp	.+8      	; 0x1212 <Dio_u8GetPortValue+0x74>
	 case DIO_PORTD : local_u8InValue = PIND ; break;
    120a:	e0 e3       	ldi	r30, 0x30	; 48
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_u8InValue ;
    1212:	89 81       	ldd	r24, Y+1	; 0x01
}
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <KeyPad_voidInit>:




void KeyPad_voidInit(void)
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
	Dio_voidSetPinDirection(KeyPad_Port,Row1_Pin,DIO_OUTPUT);
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	64 e0       	ldi	r22, 0x04	; 4
    122e:	41 e0       	ldi	r20, 0x01	; 1
    1230:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(KeyPad_Port,Row2_Pin,DIO_OUTPUT);
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	65 e0       	ldi	r22, 0x05	; 5
    1238:	41 e0       	ldi	r20, 0x01	; 1
    123a:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(KeyPad_Port,Row3_Pin,DIO_OUTPUT);
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	66 e0       	ldi	r22, 0x06	; 6
    1242:	41 e0       	ldi	r20, 0x01	; 1
    1244:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(KeyPad_Port,Row4_Pin,DIO_OUTPUT);
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	67 e0       	ldi	r22, 0x07	; 7
    124c:	41 e0       	ldi	r20, 0x01	; 1
    124e:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_voidSetPinDirection>

	Dio_voidSetPinDirection(KeyPad_Port,Column1_Pin,DIO_INPUT);
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	63 e0       	ldi	r22, 0x03	; 3
    1256:	40 e0       	ldi	r20, 0x00	; 0
    1258:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(KeyPad_Port,Column2_Pin,DIO_INPUT);
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	62 e0       	ldi	r22, 0x02	; 2
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(KeyPad_Port,Column3_Pin,DIO_INPUT);
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	61 e0       	ldi	r22, 0x01	; 1
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(KeyPad_Port,Column4_Pin,DIO_INPUT);
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	40 e0       	ldi	r20, 0x00	; 0
    1276:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_voidSetPinDirection>

	Dio_voidSetPortValue(KeyPad_Port,0xff);
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	6f ef       	ldi	r22, 0xFF	; 255
    127e:	0e 94 8e 08 	call	0x111c	; 0x111c <Dio_voidSetPortValue>
}
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <KeyPad_u8GetPressedKey>:

u8 KeyPad_u8GetPressedKey(void)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	00 d0       	rcall	.+0      	; 0x128e <KeyPad_u8GetPressedKey+0x6>
    128e:	0f 92       	push	r0
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
        u8 key = 0xff;
    1294:	8f ef       	ldi	r24, 0xFF	; 255
    1296:	8b 83       	std	Y+3, r24	; 0x03
        for (u8 r = 0; r < 4; r++)
    1298:	1a 82       	std	Y+2, r1	; 0x02
    129a:	59 c0       	rjmp	.+178    	; 0x134e <KeyPad_u8GetPressedKey+0xc6>
        {
            Dio_voidSetPinValue(KeyPad_Port, r_Pins[r], DIO_LOW);
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	88 2f       	mov	r24, r24
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	fc 01       	movw	r30, r24
    12a4:	e9 58       	subi	r30, 0x89	; 137
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	90 81       	ld	r25, Z
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	69 2f       	mov	r22, r25
    12ae:	40 e0       	ldi	r20, 0x00	; 0
    12b0:	0e 94 9b 06 	call	0xd36	; 0xd36 <Dio_voidSetPinValue>
            for (u8 c = 0; c < 4; c++)
    12b4:	19 82       	std	Y+1, r1	; 0x01
    12b6:	2f c0       	rjmp	.+94     	; 0x1316 <KeyPad_u8GetPressedKey+0x8e>
            {
                if (Dio_u8GetPinValue(KeyPad_Port, c_Pins[c]) == DIO_LOW)
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	fc 01       	movw	r30, r24
    12c0:	e5 58       	subi	r30, 0x85	; 133
    12c2:	ff 4f       	sbci	r31, 0xFF	; 255
    12c4:	90 81       	ld	r25, Z
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	69 2f       	mov	r22, r25
    12ca:	0e 94 9b 07 	call	0xf36	; 0xf36 <Dio_u8GetPinValue>
    12ce:	88 23       	and	r24, r24
    12d0:	f9 f4       	brne	.+62     	; 0x1310 <KeyPad_u8GetPressedKey+0x88>
                {
                    key = KeyPad_SwitchVal[r][c];
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	48 2f       	mov	r20, r24
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	ca 01       	movw	r24, r20
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	82 0f       	add	r24, r18
    12ea:	93 1f       	adc	r25, r19
    12ec:	fc 01       	movw	r30, r24
    12ee:	e1 58       	subi	r30, 0x81	; 129
    12f0:	ff 4f       	sbci	r31, 0xFF	; 255
    12f2:	80 81       	ld	r24, Z
    12f4:	8b 83       	std	Y+3, r24	; 0x03
                    while(Dio_u8GetPinValue(KeyPad_Port,c_Pins[c])==DIO_LOW);
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	88 2f       	mov	r24, r24
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	fc 01       	movw	r30, r24
    12fe:	e5 58       	subi	r30, 0x85	; 133
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	90 81       	ld	r25, Z
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	69 2f       	mov	r22, r25
    1308:	0e 94 9b 07 	call	0xf36	; 0xf36 <Dio_u8GetPinValue>
    130c:	88 23       	and	r24, r24
    130e:	99 f3       	breq	.-26     	; 0x12f6 <KeyPad_u8GetPressedKey+0x6e>
	{
        u8 key = 0xff;
        for (u8 r = 0; r < 4; r++)
        {
            Dio_voidSetPinValue(KeyPad_Port, r_Pins[r], DIO_LOW);
            for (u8 c = 0; c < 4; c++)
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	8f 5f       	subi	r24, 0xFF	; 255
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	84 30       	cpi	r24, 0x04	; 4
    131a:	70 f2       	brcs	.-100    	; 0x12b8 <KeyPad_u8GetPressedKey+0x30>
                {
                    key = KeyPad_SwitchVal[r][c];
                    while(Dio_u8GetPinValue(KeyPad_Port,c_Pins[c])==DIO_LOW);
                }
            }
            Dio_voidSetPinValue(KeyPad_Port, r_Pins[r], DIO_HIGH);
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	88 2f       	mov	r24, r24
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	fc 01       	movw	r30, r24
    1324:	e9 58       	subi	r30, 0x89	; 137
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	90 81       	ld	r25, Z
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	69 2f       	mov	r22, r25
    132e:	41 e0       	ldi	r20, 0x01	; 1
    1330:	0e 94 9b 06 	call	0xd36	; 0xd36 <Dio_voidSetPinValue>
            if (key != 0xff) // If a key is pressed, return the key
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	8f 3f       	cpi	r24, 0xFF	; 255
    1338:	39 f0       	breq	.+14     	; 0x1348 <KeyPad_u8GetPressedKey+0xc0>
            {
                return key;
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
            }
        }
	}
}
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret
u8 KeyPad_u8GetPressedKey(void)
{
	while(1)
	{
        u8 key = 0xff;
        for (u8 r = 0; r < 4; r++)
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	8f 5f       	subi	r24, 0xFF	; 255
    134c:	8a 83       	std	Y+2, r24	; 0x02
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	84 30       	cpi	r24, 0x04	; 4
    1352:	08 f4       	brcc	.+2      	; 0x1356 <KeyPad_u8GetPressedKey+0xce>
    1354:	a3 cf       	rjmp	.-186    	; 0x129c <KeyPad_u8GetPressedKey+0x14>
    1356:	9e cf       	rjmp	.-196    	; 0x1294 <KeyPad_u8GetPressedKey+0xc>

00001358 <Lcd_voidSendCommand>:
#include "Lcd_Interface.h"
#include "Lcd_Cfg.h"


void Lcd_voidSendCommand(u8 Cpy_u8Command)
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	6d 97       	sbiw	r28, 0x1d	; 29
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	cd bf       	out	0x3d, r28	; 61
    136c:	8d 8f       	std	Y+29, r24	; 0x1d
	//RS low
	Dio_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_LOW);
    136e:	83 e0       	ldi	r24, 0x03	; 3
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	0e 94 9b 06 	call	0xd36	; 0xd36 <Dio_voidSetPinValue>
	//RW low
	Dio_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_LOW);
    1378:	83 e0       	ldi	r24, 0x03	; 3
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	0e 94 9b 06 	call	0xd36	; 0xd36 <Dio_voidSetPinValue>
	//Send the command
	Dio_voidSetPortValue(LCD_DATA_PORT,Cpy_u8Command);
    1382:	82 e0       	ldi	r24, 0x02	; 2
    1384:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1386:	0e 94 8e 08 	call	0x111c	; 0x111c <Dio_voidSetPortValue>
	//the enable pulse
	Dio_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_HIGH);
    138a:	83 e0       	ldi	r24, 0x03	; 3
    138c:	62 e0       	ldi	r22, 0x02	; 2
    138e:	41 e0       	ldi	r20, 0x01	; 1
    1390:	0e 94 9b 06 	call	0xd36	; 0xd36 <Dio_voidSetPinValue>
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a0 e8       	ldi	r26, 0x80	; 128
    139a:	bf e3       	ldi	r27, 0x3F	; 63
    139c:	89 8f       	std	Y+25, r24	; 0x19
    139e:	9a 8f       	std	Y+26, r25	; 0x1a
    13a0:	ab 8f       	std	Y+27, r26	; 0x1b
    13a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a4:	69 8d       	ldd	r22, Y+25	; 0x19
    13a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	4a ef       	ldi	r20, 0xFA	; 250
    13b2:	54 e4       	ldi	r21, 0x44	; 68
    13b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	8d 8b       	std	Y+21, r24	; 0x15
    13be:	9e 8b       	std	Y+22, r25	; 0x16
    13c0:	af 8b       	std	Y+23, r26	; 0x17
    13c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13c4:	6d 89       	ldd	r22, Y+21	; 0x15
    13c6:	7e 89       	ldd	r23, Y+22	; 0x16
    13c8:	8f 89       	ldd	r24, Y+23	; 0x17
    13ca:	98 8d       	ldd	r25, Y+24	; 0x18
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	40 e8       	ldi	r20, 0x80	; 128
    13d2:	5f e3       	ldi	r21, 0x3F	; 63
    13d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13d8:	88 23       	and	r24, r24
    13da:	2c f4       	brge	.+10     	; 0x13e6 <Lcd_voidSendCommand+0x8e>
		__ticks = 1;
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	9c 8b       	std	Y+20, r25	; 0x14
    13e2:	8b 8b       	std	Y+19, r24	; 0x13
    13e4:	3f c0       	rjmp	.+126    	; 0x1464 <Lcd_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    13e6:	6d 89       	ldd	r22, Y+21	; 0x15
    13e8:	7e 89       	ldd	r23, Y+22	; 0x16
    13ea:	8f 89       	ldd	r24, Y+23	; 0x17
    13ec:	98 8d       	ldd	r25, Y+24	; 0x18
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	3f ef       	ldi	r19, 0xFF	; 255
    13f2:	4f e7       	ldi	r20, 0x7F	; 127
    13f4:	57 e4       	ldi	r21, 0x47	; 71
    13f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13fa:	18 16       	cp	r1, r24
    13fc:	4c f5       	brge	.+82     	; 0x1450 <Lcd_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1400:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1402:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1404:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e2       	ldi	r20, 0x20	; 32
    140c:	51 e4       	ldi	r21, 0x41	; 65
    140e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	bc 01       	movw	r22, r24
    1418:	cd 01       	movw	r24, r26
    141a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	9c 8b       	std	Y+20, r25	; 0x14
    1424:	8b 8b       	std	Y+19, r24	; 0x13
    1426:	0f c0       	rjmp	.+30     	; 0x1446 <Lcd_voidSendCommand+0xee>
    1428:	88 ec       	ldi	r24, 0xC8	; 200
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	9a 8b       	std	Y+18, r25	; 0x12
    142e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1430:	89 89       	ldd	r24, Y+17	; 0x11
    1432:	9a 89       	ldd	r25, Y+18	; 0x12
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	f1 f7       	brne	.-4      	; 0x1434 <Lcd_voidSendCommand+0xdc>
    1438:	9a 8b       	std	Y+18, r25	; 0x12
    143a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    143c:	8b 89       	ldd	r24, Y+19	; 0x13
    143e:	9c 89       	ldd	r25, Y+20	; 0x14
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	9c 8b       	std	Y+20, r25	; 0x14
    1444:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1446:	8b 89       	ldd	r24, Y+19	; 0x13
    1448:	9c 89       	ldd	r25, Y+20	; 0x14
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	69 f7       	brne	.-38     	; 0x1428 <Lcd_voidSendCommand+0xd0>
    144e:	14 c0       	rjmp	.+40     	; 0x1478 <Lcd_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1450:	6d 89       	ldd	r22, Y+21	; 0x15
    1452:	7e 89       	ldd	r23, Y+22	; 0x16
    1454:	8f 89       	ldd	r24, Y+23	; 0x17
    1456:	98 8d       	ldd	r25, Y+24	; 0x18
    1458:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	9c 8b       	std	Y+20, r25	; 0x14
    1462:	8b 8b       	std	Y+19, r24	; 0x13
    1464:	8b 89       	ldd	r24, Y+19	; 0x13
    1466:	9c 89       	ldd	r25, Y+20	; 0x14
    1468:	98 8b       	std	Y+16, r25	; 0x10
    146a:	8f 87       	std	Y+15, r24	; 0x0f
    146c:	8f 85       	ldd	r24, Y+15	; 0x0f
    146e:	98 89       	ldd	r25, Y+16	; 0x10
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	f1 f7       	brne	.-4      	; 0x1470 <Lcd_voidSendCommand+0x118>
    1474:	98 8b       	std	Y+16, r25	; 0x10
    1476:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Dio_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_LOW);
    1478:	83 e0       	ldi	r24, 0x03	; 3
    147a:	62 e0       	ldi	r22, 0x02	; 2
    147c:	40 e0       	ldi	r20, 0x00	; 0
    147e:	0e 94 9b 06 	call	0xd36	; 0xd36 <Dio_voidSetPinValue>
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	a0 e8       	ldi	r26, 0x80	; 128
    1488:	bf e3       	ldi	r27, 0x3F	; 63
    148a:	8b 87       	std	Y+11, r24	; 0x0b
    148c:	9c 87       	std	Y+12, r25	; 0x0c
    148e:	ad 87       	std	Y+13, r26	; 0x0d
    1490:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1492:	6b 85       	ldd	r22, Y+11	; 0x0b
    1494:	7c 85       	ldd	r23, Y+12	; 0x0c
    1496:	8d 85       	ldd	r24, Y+13	; 0x0d
    1498:	9e 85       	ldd	r25, Y+14	; 0x0e
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	4a ef       	ldi	r20, 0xFA	; 250
    14a0:	54 e4       	ldi	r21, 0x44	; 68
    14a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	8f 83       	std	Y+7, r24	; 0x07
    14ac:	98 87       	std	Y+8, r25	; 0x08
    14ae:	a9 87       	std	Y+9, r26	; 0x09
    14b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14b2:	6f 81       	ldd	r22, Y+7	; 0x07
    14b4:	78 85       	ldd	r23, Y+8	; 0x08
    14b6:	89 85       	ldd	r24, Y+9	; 0x09
    14b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 e8       	ldi	r20, 0x80	; 128
    14c0:	5f e3       	ldi	r21, 0x3F	; 63
    14c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14c6:	88 23       	and	r24, r24
    14c8:	2c f4       	brge	.+10     	; 0x14d4 <Lcd_voidSendCommand+0x17c>
		__ticks = 1;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	9e 83       	std	Y+6, r25	; 0x06
    14d0:	8d 83       	std	Y+5, r24	; 0x05
    14d2:	3f c0       	rjmp	.+126    	; 0x1552 <Lcd_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    14d4:	6f 81       	ldd	r22, Y+7	; 0x07
    14d6:	78 85       	ldd	r23, Y+8	; 0x08
    14d8:	89 85       	ldd	r24, Y+9	; 0x09
    14da:	9a 85       	ldd	r25, Y+10	; 0x0a
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	3f ef       	ldi	r19, 0xFF	; 255
    14e0:	4f e7       	ldi	r20, 0x7F	; 127
    14e2:	57 e4       	ldi	r21, 0x47	; 71
    14e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14e8:	18 16       	cp	r1, r24
    14ea:	4c f5       	brge	.+82     	; 0x153e <Lcd_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    14f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	40 e2       	ldi	r20, 0x20	; 32
    14fa:	51 e4       	ldi	r21, 0x41	; 65
    14fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	bc 01       	movw	r22, r24
    1506:	cd 01       	movw	r24, r26
    1508:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	9e 83       	std	Y+6, r25	; 0x06
    1512:	8d 83       	std	Y+5, r24	; 0x05
    1514:	0f c0       	rjmp	.+30     	; 0x1534 <Lcd_voidSendCommand+0x1dc>
    1516:	88 ec       	ldi	r24, 0xC8	; 200
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9c 83       	std	Y+4, r25	; 0x04
    151c:	8b 83       	std	Y+3, r24	; 0x03
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	f1 f7       	brne	.-4      	; 0x1522 <Lcd_voidSendCommand+0x1ca>
    1526:	9c 83       	std	Y+4, r25	; 0x04
    1528:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    152a:	8d 81       	ldd	r24, Y+5	; 0x05
    152c:	9e 81       	ldd	r25, Y+6	; 0x06
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	9e 83       	std	Y+6, r25	; 0x06
    1532:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1534:	8d 81       	ldd	r24, Y+5	; 0x05
    1536:	9e 81       	ldd	r25, Y+6	; 0x06
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	69 f7       	brne	.-38     	; 0x1516 <Lcd_voidSendCommand+0x1be>
    153c:	14 c0       	rjmp	.+40     	; 0x1566 <Lcd_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    153e:	6f 81       	ldd	r22, Y+7	; 0x07
    1540:	78 85       	ldd	r23, Y+8	; 0x08
    1542:	89 85       	ldd	r24, Y+9	; 0x09
    1544:	9a 85       	ldd	r25, Y+10	; 0x0a
    1546:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	9e 83       	std	Y+6, r25	; 0x06
    1550:	8d 83       	std	Y+5, r24	; 0x05
    1552:	8d 81       	ldd	r24, Y+5	; 0x05
    1554:	9e 81       	ldd	r25, Y+6	; 0x06
    1556:	9a 83       	std	Y+2, r25	; 0x02
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	9a 81       	ldd	r25, Y+2	; 0x02
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	f1 f7       	brne	.-4      	; 0x155e <Lcd_voidSendCommand+0x206>
    1562:	9a 83       	std	Y+2, r25	; 0x02
    1564:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1566:	6d 96       	adiw	r28, 0x1d	; 29
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	08 95       	ret

00001578 <Lcd_voidSendData>:

void Lcd_voidSendData(u8 Cpy_u8Data)
{
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	6d 97       	sbiw	r28, 0x1d	; 29
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	8d 8f       	std	Y+29, r24	; 0x1d
	//RS hiigh
	Dio_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_HIGH);
    158e:	83 e0       	ldi	r24, 0x03	; 3
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	41 e0       	ldi	r20, 0x01	; 1
    1594:	0e 94 9b 06 	call	0xd36	; 0xd36 <Dio_voidSetPinValue>
	//RW low
	Dio_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_LOW);
    1598:	83 e0       	ldi	r24, 0x03	; 3
    159a:	61 e0       	ldi	r22, 0x01	; 1
    159c:	40 e0       	ldi	r20, 0x00	; 0
    159e:	0e 94 9b 06 	call	0xd36	; 0xd36 <Dio_voidSetPinValue>
	//Send the data
	Dio_voidSetPortValue(LCD_DATA_PORT,Cpy_u8Data);
    15a2:	82 e0       	ldi	r24, 0x02	; 2
    15a4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    15a6:	0e 94 8e 08 	call	0x111c	; 0x111c <Dio_voidSetPortValue>
	//the enable pulse
	Dio_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_HIGH);
    15aa:	83 e0       	ldi	r24, 0x03	; 3
    15ac:	62 e0       	ldi	r22, 0x02	; 2
    15ae:	41 e0       	ldi	r20, 0x01	; 1
    15b0:	0e 94 9b 06 	call	0xd36	; 0xd36 <Dio_voidSetPinValue>
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	a0 e8       	ldi	r26, 0x80	; 128
    15ba:	bf e3       	ldi	r27, 0x3F	; 63
    15bc:	89 8f       	std	Y+25, r24	; 0x19
    15be:	9a 8f       	std	Y+26, r25	; 0x1a
    15c0:	ab 8f       	std	Y+27, r26	; 0x1b
    15c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c4:	69 8d       	ldd	r22, Y+25	; 0x19
    15c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	4a ef       	ldi	r20, 0xFA	; 250
    15d2:	54 e4       	ldi	r21, 0x44	; 68
    15d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	8d 8b       	std	Y+21, r24	; 0x15
    15de:	9e 8b       	std	Y+22, r25	; 0x16
    15e0:	af 8b       	std	Y+23, r26	; 0x17
    15e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15e4:	6d 89       	ldd	r22, Y+21	; 0x15
    15e6:	7e 89       	ldd	r23, Y+22	; 0x16
    15e8:	8f 89       	ldd	r24, Y+23	; 0x17
    15ea:	98 8d       	ldd	r25, Y+24	; 0x18
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e8       	ldi	r20, 0x80	; 128
    15f2:	5f e3       	ldi	r21, 0x3F	; 63
    15f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15f8:	88 23       	and	r24, r24
    15fa:	2c f4       	brge	.+10     	; 0x1606 <Lcd_voidSendData+0x8e>
		__ticks = 1;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	9c 8b       	std	Y+20, r25	; 0x14
    1602:	8b 8b       	std	Y+19, r24	; 0x13
    1604:	3f c0       	rjmp	.+126    	; 0x1684 <Lcd_voidSendData+0x10c>
	else if (__tmp > 65535)
    1606:	6d 89       	ldd	r22, Y+21	; 0x15
    1608:	7e 89       	ldd	r23, Y+22	; 0x16
    160a:	8f 89       	ldd	r24, Y+23	; 0x17
    160c:	98 8d       	ldd	r25, Y+24	; 0x18
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	3f ef       	ldi	r19, 0xFF	; 255
    1612:	4f e7       	ldi	r20, 0x7F	; 127
    1614:	57 e4       	ldi	r21, 0x47	; 71
    1616:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    161a:	18 16       	cp	r1, r24
    161c:	4c f5       	brge	.+82     	; 0x1670 <Lcd_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161e:	69 8d       	ldd	r22, Y+25	; 0x19
    1620:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1622:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1624:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e2       	ldi	r20, 0x20	; 32
    162c:	51 e4       	ldi	r21, 0x41	; 65
    162e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	bc 01       	movw	r22, r24
    1638:	cd 01       	movw	r24, r26
    163a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	9c 8b       	std	Y+20, r25	; 0x14
    1644:	8b 8b       	std	Y+19, r24	; 0x13
    1646:	0f c0       	rjmp	.+30     	; 0x1666 <Lcd_voidSendData+0xee>
    1648:	88 ec       	ldi	r24, 0xC8	; 200
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	9a 8b       	std	Y+18, r25	; 0x12
    164e:	89 8b       	std	Y+17, r24	; 0x11
    1650:	89 89       	ldd	r24, Y+17	; 0x11
    1652:	9a 89       	ldd	r25, Y+18	; 0x12
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <Lcd_voidSendData+0xdc>
    1658:	9a 8b       	std	Y+18, r25	; 0x12
    165a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165c:	8b 89       	ldd	r24, Y+19	; 0x13
    165e:	9c 89       	ldd	r25, Y+20	; 0x14
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	9c 8b       	std	Y+20, r25	; 0x14
    1664:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1666:	8b 89       	ldd	r24, Y+19	; 0x13
    1668:	9c 89       	ldd	r25, Y+20	; 0x14
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	69 f7       	brne	.-38     	; 0x1648 <Lcd_voidSendData+0xd0>
    166e:	14 c0       	rjmp	.+40     	; 0x1698 <Lcd_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1670:	6d 89       	ldd	r22, Y+21	; 0x15
    1672:	7e 89       	ldd	r23, Y+22	; 0x16
    1674:	8f 89       	ldd	r24, Y+23	; 0x17
    1676:	98 8d       	ldd	r25, Y+24	; 0x18
    1678:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	9c 8b       	std	Y+20, r25	; 0x14
    1682:	8b 8b       	std	Y+19, r24	; 0x13
    1684:	8b 89       	ldd	r24, Y+19	; 0x13
    1686:	9c 89       	ldd	r25, Y+20	; 0x14
    1688:	98 8b       	std	Y+16, r25	; 0x10
    168a:	8f 87       	std	Y+15, r24	; 0x0f
    168c:	8f 85       	ldd	r24, Y+15	; 0x0f
    168e:	98 89       	ldd	r25, Y+16	; 0x10
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	f1 f7       	brne	.-4      	; 0x1690 <Lcd_voidSendData+0x118>
    1694:	98 8b       	std	Y+16, r25	; 0x10
    1696:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Dio_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_LOW);
    1698:	83 e0       	ldi	r24, 0x03	; 3
    169a:	62 e0       	ldi	r22, 0x02	; 2
    169c:	40 e0       	ldi	r20, 0x00	; 0
    169e:	0e 94 9b 06 	call	0xd36	; 0xd36 <Dio_voidSetPinValue>
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	a0 e8       	ldi	r26, 0x80	; 128
    16a8:	bf e3       	ldi	r27, 0x3F	; 63
    16aa:	8b 87       	std	Y+11, r24	; 0x0b
    16ac:	9c 87       	std	Y+12, r25	; 0x0c
    16ae:	ad 87       	std	Y+13, r26	; 0x0d
    16b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	4a ef       	ldi	r20, 0xFA	; 250
    16c0:	54 e4       	ldi	r21, 0x44	; 68
    16c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	8f 83       	std	Y+7, r24	; 0x07
    16cc:	98 87       	std	Y+8, r25	; 0x08
    16ce:	a9 87       	std	Y+9, r26	; 0x09
    16d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16d2:	6f 81       	ldd	r22, Y+7	; 0x07
    16d4:	78 85       	ldd	r23, Y+8	; 0x08
    16d6:	89 85       	ldd	r24, Y+9	; 0x09
    16d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e8       	ldi	r20, 0x80	; 128
    16e0:	5f e3       	ldi	r21, 0x3F	; 63
    16e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16e6:	88 23       	and	r24, r24
    16e8:	2c f4       	brge	.+10     	; 0x16f4 <Lcd_voidSendData+0x17c>
		__ticks = 1;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9e 83       	std	Y+6, r25	; 0x06
    16f0:	8d 83       	std	Y+5, r24	; 0x05
    16f2:	3f c0       	rjmp	.+126    	; 0x1772 <Lcd_voidSendData+0x1fa>
	else if (__tmp > 65535)
    16f4:	6f 81       	ldd	r22, Y+7	; 0x07
    16f6:	78 85       	ldd	r23, Y+8	; 0x08
    16f8:	89 85       	ldd	r24, Y+9	; 0x09
    16fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	3f ef       	ldi	r19, 0xFF	; 255
    1700:	4f e7       	ldi	r20, 0x7F	; 127
    1702:	57 e4       	ldi	r21, 0x47	; 71
    1704:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1708:	18 16       	cp	r1, r24
    170a:	4c f5       	brge	.+82     	; 0x175e <Lcd_voidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170c:	6b 85       	ldd	r22, Y+11	; 0x0b
    170e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1710:	8d 85       	ldd	r24, Y+13	; 0x0d
    1712:	9e 85       	ldd	r25, Y+14	; 0x0e
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e2       	ldi	r20, 0x20	; 32
    171a:	51 e4       	ldi	r21, 0x41	; 65
    171c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	bc 01       	movw	r22, r24
    1726:	cd 01       	movw	r24, r26
    1728:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	9e 83       	std	Y+6, r25	; 0x06
    1732:	8d 83       	std	Y+5, r24	; 0x05
    1734:	0f c0       	rjmp	.+30     	; 0x1754 <Lcd_voidSendData+0x1dc>
    1736:	88 ec       	ldi	r24, 0xC8	; 200
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	9c 83       	std	Y+4, r25	; 0x04
    173c:	8b 83       	std	Y+3, r24	; 0x03
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	9c 81       	ldd	r25, Y+4	; 0x04
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	f1 f7       	brne	.-4      	; 0x1742 <Lcd_voidSendData+0x1ca>
    1746:	9c 83       	std	Y+4, r25	; 0x04
    1748:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174a:	8d 81       	ldd	r24, Y+5	; 0x05
    174c:	9e 81       	ldd	r25, Y+6	; 0x06
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	9e 83       	std	Y+6, r25	; 0x06
    1752:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	9e 81       	ldd	r25, Y+6	; 0x06
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	69 f7       	brne	.-38     	; 0x1736 <Lcd_voidSendData+0x1be>
    175c:	14 c0       	rjmp	.+40     	; 0x1786 <Lcd_voidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175e:	6f 81       	ldd	r22, Y+7	; 0x07
    1760:	78 85       	ldd	r23, Y+8	; 0x08
    1762:	89 85       	ldd	r24, Y+9	; 0x09
    1764:	9a 85       	ldd	r25, Y+10	; 0x0a
    1766:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	9e 83       	std	Y+6, r25	; 0x06
    1770:	8d 83       	std	Y+5, r24	; 0x05
    1772:	8d 81       	ldd	r24, Y+5	; 0x05
    1774:	9e 81       	ldd	r25, Y+6	; 0x06
    1776:	9a 83       	std	Y+2, r25	; 0x02
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	9a 81       	ldd	r25, Y+2	; 0x02
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	f1 f7       	brne	.-4      	; 0x177e <Lcd_voidSendData+0x206>
    1782:	9a 83       	std	Y+2, r25	; 0x02
    1784:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1786:	6d 96       	adiw	r28, 0x1d	; 29
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <Lcd_Init>:

void Lcd_Init(void)
{
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	e8 97       	sbiw	r28, 0x38	; 56
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
	// initialiez pins as out
	Dio_voidSetPortDirection(LCD_DATA_PORT,DIO_OUTPUT);
    17ac:	82 e0       	ldi	r24, 0x02	; 2
    17ae:	61 e0       	ldi	r22, 0x01	; 1
    17b0:	0e 94 15 08 	call	0x102a	; 0x102a <Dio_voidSetPortDirection>
	Dio_voidSetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_OUTPUT);
    17b4:	83 e0       	ldi	r24, 0x03	; 3
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	41 e0       	ldi	r20, 0x01	; 1
    17ba:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_OUTPUT);
    17be:	83 e0       	ldi	r24, 0x03	; 3
    17c0:	61 e0       	ldi	r22, 0x01	; 1
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(LCD_E_PORT,LCD_E_PIN,DIO_OUTPUT);
    17c8:	83 e0       	ldi	r24, 0x03	; 3
    17ca:	62 e0       	ldi	r22, 0x02	; 2
    17cc:	41 e0       	ldi	r20, 0x01	; 1
    17ce:	0e 94 9b 05 	call	0xb36	; 0xb36 <Dio_voidSetPinDirection>
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	a0 e2       	ldi	r26, 0x20	; 32
    17d8:	b2 e4       	ldi	r27, 0x42	; 66
    17da:	8d ab       	std	Y+53, r24	; 0x35
    17dc:	9e ab       	std	Y+54, r25	; 0x36
    17de:	af ab       	std	Y+55, r26	; 0x37
    17e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e2:	6d a9       	ldd	r22, Y+53	; 0x35
    17e4:	7e a9       	ldd	r23, Y+54	; 0x36
    17e6:	8f a9       	ldd	r24, Y+55	; 0x37
    17e8:	98 ad       	ldd	r25, Y+56	; 0x38
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	4a ef       	ldi	r20, 0xFA	; 250
    17f0:	54 e4       	ldi	r21, 0x44	; 68
    17f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	89 ab       	std	Y+49, r24	; 0x31
    17fc:	9a ab       	std	Y+50, r25	; 0x32
    17fe:	ab ab       	std	Y+51, r26	; 0x33
    1800:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1802:	69 a9       	ldd	r22, Y+49	; 0x31
    1804:	7a a9       	ldd	r23, Y+50	; 0x32
    1806:	8b a9       	ldd	r24, Y+51	; 0x33
    1808:	9c a9       	ldd	r25, Y+52	; 0x34
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e8       	ldi	r20, 0x80	; 128
    1810:	5f e3       	ldi	r21, 0x3F	; 63
    1812:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1816:	88 23       	and	r24, r24
    1818:	2c f4       	brge	.+10     	; 0x1824 <Lcd_Init+0x8c>
		__ticks = 1;
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	98 ab       	std	Y+48, r25	; 0x30
    1820:	8f a7       	std	Y+47, r24	; 0x2f
    1822:	3f c0       	rjmp	.+126    	; 0x18a2 <Lcd_Init+0x10a>
	else if (__tmp > 65535)
    1824:	69 a9       	ldd	r22, Y+49	; 0x31
    1826:	7a a9       	ldd	r23, Y+50	; 0x32
    1828:	8b a9       	ldd	r24, Y+51	; 0x33
    182a:	9c a9       	ldd	r25, Y+52	; 0x34
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	3f ef       	ldi	r19, 0xFF	; 255
    1830:	4f e7       	ldi	r20, 0x7F	; 127
    1832:	57 e4       	ldi	r21, 0x47	; 71
    1834:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1838:	18 16       	cp	r1, r24
    183a:	4c f5       	brge	.+82     	; 0x188e <Lcd_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183c:	6d a9       	ldd	r22, Y+53	; 0x35
    183e:	7e a9       	ldd	r23, Y+54	; 0x36
    1840:	8f a9       	ldd	r24, Y+55	; 0x37
    1842:	98 ad       	ldd	r25, Y+56	; 0x38
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e2       	ldi	r20, 0x20	; 32
    184a:	51 e4       	ldi	r21, 0x41	; 65
    184c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	bc 01       	movw	r22, r24
    1856:	cd 01       	movw	r24, r26
    1858:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	98 ab       	std	Y+48, r25	; 0x30
    1862:	8f a7       	std	Y+47, r24	; 0x2f
    1864:	0f c0       	rjmp	.+30     	; 0x1884 <Lcd_Init+0xec>
    1866:	88 ec       	ldi	r24, 0xC8	; 200
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	9e a7       	std	Y+46, r25	; 0x2e
    186c:	8d a7       	std	Y+45, r24	; 0x2d
    186e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1870:	9e a5       	ldd	r25, Y+46	; 0x2e
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	f1 f7       	brne	.-4      	; 0x1872 <Lcd_Init+0xda>
    1876:	9e a7       	std	Y+46, r25	; 0x2e
    1878:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187a:	8f a5       	ldd	r24, Y+47	; 0x2f
    187c:	98 a9       	ldd	r25, Y+48	; 0x30
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	98 ab       	std	Y+48, r25	; 0x30
    1882:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1884:	8f a5       	ldd	r24, Y+47	; 0x2f
    1886:	98 a9       	ldd	r25, Y+48	; 0x30
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	69 f7       	brne	.-38     	; 0x1866 <Lcd_Init+0xce>
    188c:	14 c0       	rjmp	.+40     	; 0x18b6 <Lcd_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188e:	69 a9       	ldd	r22, Y+49	; 0x31
    1890:	7a a9       	ldd	r23, Y+50	; 0x32
    1892:	8b a9       	ldd	r24, Y+51	; 0x33
    1894:	9c a9       	ldd	r25, Y+52	; 0x34
    1896:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	98 ab       	std	Y+48, r25	; 0x30
    18a0:	8f a7       	std	Y+47, r24	; 0x2f
    18a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    18a4:	98 a9       	ldd	r25, Y+48	; 0x30
    18a6:	9c a7       	std	Y+44, r25	; 0x2c
    18a8:	8b a7       	std	Y+43, r24	; 0x2b
    18aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    18ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <Lcd_Init+0x116>
    18b2:	9c a7       	std	Y+44, r25	; 0x2c
    18b4:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);
	Lcd_voidSendCommand(0b00111000);
    18b6:	88 e3       	ldi	r24, 0x38	; 56
    18b8:	0e 94 ac 09 	call	0x1358	; 0x1358 <Lcd_voidSendCommand>
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	a0 e8       	ldi	r26, 0x80	; 128
    18c2:	bf e3       	ldi	r27, 0x3F	; 63
    18c4:	8f a3       	std	Y+39, r24	; 0x27
    18c6:	98 a7       	std	Y+40, r25	; 0x28
    18c8:	a9 a7       	std	Y+41, r26	; 0x29
    18ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18cc:	6f a1       	ldd	r22, Y+39	; 0x27
    18ce:	78 a5       	ldd	r23, Y+40	; 0x28
    18d0:	89 a5       	ldd	r24, Y+41	; 0x29
    18d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	4a ef       	ldi	r20, 0xFA	; 250
    18da:	54 e4       	ldi	r21, 0x44	; 68
    18dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	8b a3       	std	Y+35, r24	; 0x23
    18e6:	9c a3       	std	Y+36, r25	; 0x24
    18e8:	ad a3       	std	Y+37, r26	; 0x25
    18ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18ec:	6b a1       	ldd	r22, Y+35	; 0x23
    18ee:	7c a1       	ldd	r23, Y+36	; 0x24
    18f0:	8d a1       	ldd	r24, Y+37	; 0x25
    18f2:	9e a1       	ldd	r25, Y+38	; 0x26
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e8       	ldi	r20, 0x80	; 128
    18fa:	5f e3       	ldi	r21, 0x3F	; 63
    18fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1900:	88 23       	and	r24, r24
    1902:	2c f4       	brge	.+10     	; 0x190e <Lcd_Init+0x176>
		__ticks = 1;
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	9a a3       	std	Y+34, r25	; 0x22
    190a:	89 a3       	std	Y+33, r24	; 0x21
    190c:	3f c0       	rjmp	.+126    	; 0x198c <Lcd_Init+0x1f4>
	else if (__tmp > 65535)
    190e:	6b a1       	ldd	r22, Y+35	; 0x23
    1910:	7c a1       	ldd	r23, Y+36	; 0x24
    1912:	8d a1       	ldd	r24, Y+37	; 0x25
    1914:	9e a1       	ldd	r25, Y+38	; 0x26
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	3f ef       	ldi	r19, 0xFF	; 255
    191a:	4f e7       	ldi	r20, 0x7F	; 127
    191c:	57 e4       	ldi	r21, 0x47	; 71
    191e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1922:	18 16       	cp	r1, r24
    1924:	4c f5       	brge	.+82     	; 0x1978 <Lcd_Init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1926:	6f a1       	ldd	r22, Y+39	; 0x27
    1928:	78 a5       	ldd	r23, Y+40	; 0x28
    192a:	89 a5       	ldd	r24, Y+41	; 0x29
    192c:	9a a5       	ldd	r25, Y+42	; 0x2a
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e2       	ldi	r20, 0x20	; 32
    1934:	51 e4       	ldi	r21, 0x41	; 65
    1936:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	bc 01       	movw	r22, r24
    1940:	cd 01       	movw	r24, r26
    1942:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	9a a3       	std	Y+34, r25	; 0x22
    194c:	89 a3       	std	Y+33, r24	; 0x21
    194e:	0f c0       	rjmp	.+30     	; 0x196e <Lcd_Init+0x1d6>
    1950:	88 ec       	ldi	r24, 0xC8	; 200
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	98 a3       	std	Y+32, r25	; 0x20
    1956:	8f 8f       	std	Y+31, r24	; 0x1f
    1958:	8f 8d       	ldd	r24, Y+31	; 0x1f
    195a:	98 a1       	ldd	r25, Y+32	; 0x20
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	f1 f7       	brne	.-4      	; 0x195c <Lcd_Init+0x1c4>
    1960:	98 a3       	std	Y+32, r25	; 0x20
    1962:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1964:	89 a1       	ldd	r24, Y+33	; 0x21
    1966:	9a a1       	ldd	r25, Y+34	; 0x22
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	9a a3       	std	Y+34, r25	; 0x22
    196c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196e:	89 a1       	ldd	r24, Y+33	; 0x21
    1970:	9a a1       	ldd	r25, Y+34	; 0x22
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	69 f7       	brne	.-38     	; 0x1950 <Lcd_Init+0x1b8>
    1976:	14 c0       	rjmp	.+40     	; 0x19a0 <Lcd_Init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1978:	6b a1       	ldd	r22, Y+35	; 0x23
    197a:	7c a1       	ldd	r23, Y+36	; 0x24
    197c:	8d a1       	ldd	r24, Y+37	; 0x25
    197e:	9e a1       	ldd	r25, Y+38	; 0x26
    1980:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	9a a3       	std	Y+34, r25	; 0x22
    198a:	89 a3       	std	Y+33, r24	; 0x21
    198c:	89 a1       	ldd	r24, Y+33	; 0x21
    198e:	9a a1       	ldd	r25, Y+34	; 0x22
    1990:	9e 8f       	std	Y+30, r25	; 0x1e
    1992:	8d 8f       	std	Y+29, r24	; 0x1d
    1994:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1996:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <Lcd_Init+0x200>
    199c:	9e 8f       	std	Y+30, r25	; 0x1e
    199e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Lcd_voidSendCommand(0b00001100);
    19a0:	8c e0       	ldi	r24, 0x0C	; 12
    19a2:	0e 94 ac 09 	call	0x1358	; 0x1358 <Lcd_voidSendCommand>
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	a0 e8       	ldi	r26, 0x80	; 128
    19ac:	bf e3       	ldi	r27, 0x3F	; 63
    19ae:	89 8f       	std	Y+25, r24	; 0x19
    19b0:	9a 8f       	std	Y+26, r25	; 0x1a
    19b2:	ab 8f       	std	Y+27, r26	; 0x1b
    19b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b6:	69 8d       	ldd	r22, Y+25	; 0x19
    19b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	4a ef       	ldi	r20, 0xFA	; 250
    19c4:	54 e4       	ldi	r21, 0x44	; 68
    19c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	8d 8b       	std	Y+21, r24	; 0x15
    19d0:	9e 8b       	std	Y+22, r25	; 0x16
    19d2:	af 8b       	std	Y+23, r26	; 0x17
    19d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19d6:	6d 89       	ldd	r22, Y+21	; 0x15
    19d8:	7e 89       	ldd	r23, Y+22	; 0x16
    19da:	8f 89       	ldd	r24, Y+23	; 0x17
    19dc:	98 8d       	ldd	r25, Y+24	; 0x18
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	40 e8       	ldi	r20, 0x80	; 128
    19e4:	5f e3       	ldi	r21, 0x3F	; 63
    19e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19ea:	88 23       	and	r24, r24
    19ec:	2c f4       	brge	.+10     	; 0x19f8 <Lcd_Init+0x260>
		__ticks = 1;
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	9c 8b       	std	Y+20, r25	; 0x14
    19f4:	8b 8b       	std	Y+19, r24	; 0x13
    19f6:	3f c0       	rjmp	.+126    	; 0x1a76 <Lcd_Init+0x2de>
	else if (__tmp > 65535)
    19f8:	6d 89       	ldd	r22, Y+21	; 0x15
    19fa:	7e 89       	ldd	r23, Y+22	; 0x16
    19fc:	8f 89       	ldd	r24, Y+23	; 0x17
    19fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	3f ef       	ldi	r19, 0xFF	; 255
    1a04:	4f e7       	ldi	r20, 0x7F	; 127
    1a06:	57 e4       	ldi	r21, 0x47	; 71
    1a08:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a0c:	18 16       	cp	r1, r24
    1a0e:	4c f5       	brge	.+82     	; 0x1a62 <Lcd_Init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a10:	69 8d       	ldd	r22, Y+25	; 0x19
    1a12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	40 e2       	ldi	r20, 0x20	; 32
    1a1e:	51 e4       	ldi	r21, 0x41	; 65
    1a20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	bc 01       	movw	r22, r24
    1a2a:	cd 01       	movw	r24, r26
    1a2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	9c 8b       	std	Y+20, r25	; 0x14
    1a36:	8b 8b       	std	Y+19, r24	; 0x13
    1a38:	0f c0       	rjmp	.+30     	; 0x1a58 <Lcd_Init+0x2c0>
    1a3a:	88 ec       	ldi	r24, 0xC8	; 200
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	9a 8b       	std	Y+18, r25	; 0x12
    1a40:	89 8b       	std	Y+17, r24	; 0x11
    1a42:	89 89       	ldd	r24, Y+17	; 0x11
    1a44:	9a 89       	ldd	r25, Y+18	; 0x12
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	f1 f7       	brne	.-4      	; 0x1a46 <Lcd_Init+0x2ae>
    1a4a:	9a 8b       	std	Y+18, r25	; 0x12
    1a4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a50:	9c 89       	ldd	r25, Y+20	; 0x14
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	9c 8b       	std	Y+20, r25	; 0x14
    1a56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a58:	8b 89       	ldd	r24, Y+19	; 0x13
    1a5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	69 f7       	brne	.-38     	; 0x1a3a <Lcd_Init+0x2a2>
    1a60:	14 c0       	rjmp	.+40     	; 0x1a8a <Lcd_Init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a62:	6d 89       	ldd	r22, Y+21	; 0x15
    1a64:	7e 89       	ldd	r23, Y+22	; 0x16
    1a66:	8f 89       	ldd	r24, Y+23	; 0x17
    1a68:	98 8d       	ldd	r25, Y+24	; 0x18
    1a6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	9c 8b       	std	Y+20, r25	; 0x14
    1a74:	8b 8b       	std	Y+19, r24	; 0x13
    1a76:	8b 89       	ldd	r24, Y+19	; 0x13
    1a78:	9c 89       	ldd	r25, Y+20	; 0x14
    1a7a:	98 8b       	std	Y+16, r25	; 0x10
    1a7c:	8f 87       	std	Y+15, r24	; 0x0f
    1a7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a80:	98 89       	ldd	r25, Y+16	; 0x10
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	f1 f7       	brne	.-4      	; 0x1a82 <Lcd_Init+0x2ea>
    1a86:	98 8b       	std	Y+16, r25	; 0x10
    1a88:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Lcd_voidSendCommand(0b00000001);
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	0e 94 ac 09 	call	0x1358	; 0x1358 <Lcd_voidSendCommand>
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	a0 e0       	ldi	r26, 0x00	; 0
    1a96:	b0 e4       	ldi	r27, 0x40	; 64
    1a98:	8b 87       	std	Y+11, r24	; 0x0b
    1a9a:	9c 87       	std	Y+12, r25	; 0x0c
    1a9c:	ad 87       	std	Y+13, r26	; 0x0d
    1a9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	4a ef       	ldi	r20, 0xFA	; 250
    1aae:	54 e4       	ldi	r21, 0x44	; 68
    1ab0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	8f 83       	std	Y+7, r24	; 0x07
    1aba:	98 87       	std	Y+8, r25	; 0x08
    1abc:	a9 87       	std	Y+9, r26	; 0x09
    1abe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ac0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac2:	78 85       	ldd	r23, Y+8	; 0x08
    1ac4:	89 85       	ldd	r24, Y+9	; 0x09
    1ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e8       	ldi	r20, 0x80	; 128
    1ace:	5f e3       	ldi	r21, 0x3F	; 63
    1ad0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ad4:	88 23       	and	r24, r24
    1ad6:	2c f4       	brge	.+10     	; 0x1ae2 <Lcd_Init+0x34a>
		__ticks = 1;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	9e 83       	std	Y+6, r25	; 0x06
    1ade:	8d 83       	std	Y+5, r24	; 0x05
    1ae0:	3f c0       	rjmp	.+126    	; 0x1b60 <Lcd_Init+0x3c8>
	else if (__tmp > 65535)
    1ae2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae4:	78 85       	ldd	r23, Y+8	; 0x08
    1ae6:	89 85       	ldd	r24, Y+9	; 0x09
    1ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	3f ef       	ldi	r19, 0xFF	; 255
    1aee:	4f e7       	ldi	r20, 0x7F	; 127
    1af0:	57 e4       	ldi	r21, 0x47	; 71
    1af2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1af6:	18 16       	cp	r1, r24
    1af8:	4c f5       	brge	.+82     	; 0x1b4c <Lcd_Init+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e2       	ldi	r20, 0x20	; 32
    1b08:	51 e4       	ldi	r21, 0x41	; 65
    1b0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	bc 01       	movw	r22, r24
    1b14:	cd 01       	movw	r24, r26
    1b16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	9e 83       	std	Y+6, r25	; 0x06
    1b20:	8d 83       	std	Y+5, r24	; 0x05
    1b22:	0f c0       	rjmp	.+30     	; 0x1b42 <Lcd_Init+0x3aa>
    1b24:	88 ec       	ldi	r24, 0xC8	; 200
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	9c 83       	std	Y+4, r25	; 0x04
    1b2a:	8b 83       	std	Y+3, r24	; 0x03
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <Lcd_Init+0x398>
    1b34:	9c 83       	std	Y+4, r25	; 0x04
    1b36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b38:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	9e 83       	std	Y+6, r25	; 0x06
    1b40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b42:	8d 81       	ldd	r24, Y+5	; 0x05
    1b44:	9e 81       	ldd	r25, Y+6	; 0x06
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	69 f7       	brne	.-38     	; 0x1b24 <Lcd_Init+0x38c>
    1b4a:	14 c0       	rjmp	.+40     	; 0x1b74 <Lcd_Init+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4e:	78 85       	ldd	r23, Y+8	; 0x08
    1b50:	89 85       	ldd	r24, Y+9	; 0x09
    1b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	9e 83       	std	Y+6, r25	; 0x06
    1b5e:	8d 83       	std	Y+5, r24	; 0x05
    1b60:	8d 81       	ldd	r24, Y+5	; 0x05
    1b62:	9e 81       	ldd	r25, Y+6	; 0x06
    1b64:	9a 83       	std	Y+2, r25	; 0x02
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <Lcd_Init+0x3d4>
    1b70:	9a 83       	std	Y+2, r25	; 0x02
    1b72:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Lcd_voidSendCommand(0b00000110);
    1b74:	86 e0       	ldi	r24, 0x06	; 6
    1b76:	0e 94 ac 09 	call	0x1358	; 0x1358 <Lcd_voidSendCommand>
}
    1b7a:	e8 96       	adiw	r28, 0x38	; 56
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	08 95       	ret

00001b8c <Lcd_GoToXY>:

void Lcd_GoToXY(u8 x,u8 y)
{
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <Lcd_GoToXY+0x6>
    1b92:	0f 92       	push	r0
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	8a 83       	std	Y+2, r24	; 0x02
    1b9a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Lcd_u8Adress=64*x+y+128;
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	88 2f       	mov	r24, r24
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	00 24       	eor	r0, r0
    1ba4:	96 95       	lsr	r25
    1ba6:	87 95       	ror	r24
    1ba8:	07 94       	ror	r0
    1baa:	96 95       	lsr	r25
    1bac:	87 95       	ror	r24
    1bae:	07 94       	ror	r0
    1bb0:	98 2f       	mov	r25, r24
    1bb2:	80 2d       	mov	r24, r0
    1bb4:	98 2f       	mov	r25, r24
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	89 0f       	add	r24, r25
    1bba:	80 58       	subi	r24, 0x80	; 128
    1bbc:	89 83       	std	Y+1, r24	; 0x01
	Lcd_voidSendCommand(Lcd_u8Adress);
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	0e 94 ac 09 	call	0x1358	; 0x1358 <Lcd_voidSendCommand>
}
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <Lcd_VoidWriteString>:

void Lcd_VoidWriteString(char Cpy_ChararrData[])
{
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <Lcd_VoidWriteString+0x6>
    1bd6:	0f 92       	push	r0
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	9b 83       	std	Y+3, r25	; 0x03
    1bde:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter=0;
    1be0:	19 82       	std	Y+1, r1	; 0x01
    1be2:	0e c0       	rjmp	.+28     	; 0x1c00 <Lcd_VoidWriteString+0x30>
	while(Cpy_ChararrData[counter]!='\0')
	{

		Lcd_voidSendData(Cpy_ChararrData[counter]);
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	9b 81       	ldd	r25, Y+3	; 0x03
    1bee:	fc 01       	movw	r30, r24
    1bf0:	e2 0f       	add	r30, r18
    1bf2:	f3 1f       	adc	r31, r19
    1bf4:	80 81       	ld	r24, Z
    1bf6:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Lcd_voidSendData>
		counter++;
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	8f 5f       	subi	r24, 0xFF	; 255
    1bfe:	89 83       	std	Y+1, r24	; 0x01
}

void Lcd_VoidWriteString(char Cpy_ChararrData[])
{
	u8 counter=0;
	while(Cpy_ChararrData[counter]!='\0')
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	e2 0f       	add	r30, r18
    1c0e:	f3 1f       	adc	r31, r19
    1c10:	80 81       	ld	r24, Z
    1c12:	88 23       	and	r24, r24
    1c14:	39 f7       	brne	.-50     	; 0x1be4 <Lcd_VoidWriteString+0x14>

		Lcd_voidSendData(Cpy_ChararrData[counter]);
		counter++;
	}

}
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <Lcd_voidAddNewPattern>:

void Lcd_voidAddNewPattern(u8 Block_Num,u8 *arr)
{
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <Lcd_voidAddNewPattern+0x6>
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <Lcd_voidAddNewPattern+0x8>
    1c2a:	0f 92       	push	r0
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	8b 83       	std	Y+3, r24	; 0x03
    1c32:	7d 83       	std	Y+5, r23	; 0x05
    1c34:	6c 83       	std	Y+4, r22	; 0x04
	u8 address = 64+Block_Num*8;
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	88 2f       	mov	r24, r24
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	08 96       	adiw	r24, 0x08	; 8
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	88 0f       	add	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	8a 83       	std	Y+2, r24	; 0x02
	Lcd_voidSendCommand(address);
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	0e 94 ac 09 	call	0x1358	; 0x1358 <Lcd_voidSendCommand>

	for(u8 i=0;i<8;i++)
    1c52:	19 82       	std	Y+1, r1	; 0x01
    1c54:	0e c0       	rjmp	.+28     	; 0x1c72 <Lcd_voidAddNewPattern+0x50>
	{
		Lcd_voidSendData(arr[i]);
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	28 2f       	mov	r18, r24
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c60:	fc 01       	movw	r30, r24
    1c62:	e2 0f       	add	r30, r18
    1c64:	f3 1f       	adc	r31, r19
    1c66:	80 81       	ld	r24, Z
    1c68:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Lcd_voidSendData>
void Lcd_voidAddNewPattern(u8 Block_Num,u8 *arr)
{
	u8 address = 64+Block_Num*8;
	Lcd_voidSendCommand(address);

	for(u8 i=0;i<8;i++)
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	8f 5f       	subi	r24, 0xFF	; 255
    1c70:	89 83       	std	Y+1, r24	; 0x01
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	88 30       	cpi	r24, 0x08	; 8
    1c76:	78 f3       	brcs	.-34     	; 0x1c56 <Lcd_voidAddNewPattern+0x34>
	{
		Lcd_voidSendData(arr[i]);
	}
}
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <Lcd_voidShowNewPattern>:
void Lcd_voidShowNewPattern(u8 Block_Num,u8 x,u8 y)
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <Lcd_voidShowNewPattern+0x6>
    1c8e:	0f 92       	push	r0
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	89 83       	std	Y+1, r24	; 0x01
    1c96:	6a 83       	std	Y+2, r22	; 0x02
    1c98:	4b 83       	std	Y+3, r20	; 0x03
	Lcd_GoToXY(x,y);
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	6b 81       	ldd	r22, Y+3	; 0x03
    1c9e:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <Lcd_GoToXY>
	Lcd_voidSendData(Block_Num);
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Lcd_voidSendData>
}
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <Lcd_VoidWriteNumber>:

void Lcd_VoidWriteNumber(s32 Cpy_Num)
{
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	64 97       	sbiw	r28, 0x14	; 20
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	de bf       	out	0x3e, r29	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	cd bf       	out	0x3d, r28	; 61
    1ccc:	69 8b       	std	Y+17, r22	; 0x11
    1cce:	7a 8b       	std	Y+18, r23	; 0x12
    1cd0:	8b 8b       	std	Y+19, r24	; 0x13
    1cd2:	9c 8b       	std	Y+20, r25	; 0x14
	u8 store[14],i=0; // store to hold the converted number as a string
    1cd4:	1a 82       	std	Y+2, r1	; 0x02
	if (Cpy_Num<0)
    1cd6:	89 89       	ldd	r24, Y+17	; 0x11
    1cd8:	9a 89       	ldd	r25, Y+18	; 0x12
    1cda:	ab 89       	ldd	r26, Y+19	; 0x13
    1cdc:	bc 89       	ldd	r27, Y+20	; 0x14
    1cde:	bb 23       	and	r27, r27
    1ce0:	0c f0       	brlt	.+2      	; 0x1ce4 <Lcd_VoidWriteNumber+0x30>
    1ce2:	66 c0       	rjmp	.+204    	; 0x1db0 <Lcd_VoidWriteNumber+0xfc>
    {
    	Cpy_Num=(-Cpy_Num);
    1ce4:	89 89       	ldd	r24, Y+17	; 0x11
    1ce6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ce8:	ab 89       	ldd	r26, Y+19	; 0x13
    1cea:	bc 89       	ldd	r27, Y+20	; 0x14
    1cec:	b0 95       	com	r27
    1cee:	a0 95       	com	r26
    1cf0:	90 95       	com	r25
    1cf2:	81 95       	neg	r24
    1cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf6:	af 4f       	sbci	r26, 0xFF	; 255
    1cf8:	bf 4f       	sbci	r27, 0xFF	; 255
    1cfa:	89 8b       	std	Y+17, r24	; 0x11
    1cfc:	9a 8b       	std	Y+18, r25	; 0x12
    1cfe:	ab 8b       	std	Y+19, r26	; 0x13
    1d00:	bc 8b       	std	Y+20, r27	; 0x14
    1d02:	42 c0       	rjmp	.+132    	; 0x1d88 <Lcd_VoidWriteNumber+0xd4>
    	while(Cpy_Num!=0)
       {
   		   store[i]=(Cpy_Num%10)+'0';
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	08 2f       	mov	r16, r24
    1d08:	10 e0       	ldi	r17, 0x00	; 0
    1d0a:	89 89       	ldd	r24, Y+17	; 0x11
    1d0c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d0e:	ab 89       	ldd	r26, Y+19	; 0x13
    1d10:	bc 89       	ldd	r27, Y+20	; 0x14
    1d12:	2a e0       	ldi	r18, 0x0A	; 10
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	50 e0       	ldi	r21, 0x00	; 0
    1d1a:	bc 01       	movw	r22, r24
    1d1c:	cd 01       	movw	r24, r26
    1d1e:	0e 94 0e 11 	call	0x221c	; 0x221c <__divmodsi4>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	28 2f       	mov	r18, r24
    1d28:	20 5d       	subi	r18, 0xD0	; 208
    1d2a:	ce 01       	movw	r24, r28
    1d2c:	03 96       	adiw	r24, 0x03	; 3
    1d2e:	fc 01       	movw	r30, r24
    1d30:	e0 0f       	add	r30, r16
    1d32:	f1 1f       	adc	r31, r17
    1d34:	20 83       	st	Z, r18
   		   Cpy_Num=(Cpy_Num-(Cpy_Num%10))/10;
    1d36:	89 89       	ldd	r24, Y+17	; 0x11
    1d38:	9a 89       	ldd	r25, Y+18	; 0x12
    1d3a:	ab 89       	ldd	r26, Y+19	; 0x13
    1d3c:	bc 89       	ldd	r27, Y+20	; 0x14
    1d3e:	2a e0       	ldi	r18, 0x0A	; 10
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	50 e0       	ldi	r21, 0x00	; 0
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	0e 94 0e 11 	call	0x221c	; 0x221c <__divmodsi4>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	9c 01       	movw	r18, r24
    1d54:	ad 01       	movw	r20, r26
    1d56:	89 89       	ldd	r24, Y+17	; 0x11
    1d58:	9a 89       	ldd	r25, Y+18	; 0x12
    1d5a:	ab 89       	ldd	r26, Y+19	; 0x13
    1d5c:	bc 89       	ldd	r27, Y+20	; 0x14
    1d5e:	82 1b       	sub	r24, r18
    1d60:	93 0b       	sbc	r25, r19
    1d62:	a4 0b       	sbc	r26, r20
    1d64:	b5 0b       	sbc	r27, r21
    1d66:	2a e0       	ldi	r18, 0x0A	; 10
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	50 e0       	ldi	r21, 0x00	; 0
    1d6e:	bc 01       	movw	r22, r24
    1d70:	cd 01       	movw	r24, r26
    1d72:	0e 94 0e 11 	call	0x221c	; 0x221c <__divmodsi4>
    1d76:	da 01       	movw	r26, r20
    1d78:	c9 01       	movw	r24, r18
    1d7a:	89 8b       	std	Y+17, r24	; 0x11
    1d7c:	9a 8b       	std	Y+18, r25	; 0x12
    1d7e:	ab 8b       	std	Y+19, r26	; 0x13
    1d80:	bc 8b       	std	Y+20, r27	; 0x14
   		   i++;
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	8f 5f       	subi	r24, 0xFF	; 255
    1d86:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 store[14],i=0; // store to hold the converted number as a string
	if (Cpy_Num<0)
    {
    	Cpy_Num=(-Cpy_Num);
    	while(Cpy_Num!=0)
    1d88:	89 89       	ldd	r24, Y+17	; 0x11
    1d8a:	9a 89       	ldd	r25, Y+18	; 0x12
    1d8c:	ab 89       	ldd	r26, Y+19	; 0x13
    1d8e:	bc 89       	ldd	r27, Y+20	; 0x14
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	a1 05       	cpc	r26, r1
    1d94:	b1 05       	cpc	r27, r1
    1d96:	09 f0       	breq	.+2      	; 0x1d9a <Lcd_VoidWriteNumber+0xe6>
    1d98:	b5 cf       	rjmp	.-150    	; 0x1d04 <Lcd_VoidWriteNumber+0x50>
       {
   		   store[i]=(Cpy_Num%10)+'0';
   		   Cpy_Num=(Cpy_Num-(Cpy_Num%10))/10;
   		   i++;
   	   }
       store[i]='-';
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	ce 01       	movw	r24, r28
    1da2:	03 96       	adiw	r24, 0x03	; 3
    1da4:	fc 01       	movw	r30, r24
    1da6:	e2 0f       	add	r30, r18
    1da8:	f3 1f       	adc	r31, r19
    1daa:	8d e2       	ldi	r24, 0x2D	; 45
    1dac:	80 83       	st	Z, r24
    1dae:	6c c0       	rjmp	.+216    	; 0x1e88 <Lcd_VoidWriteNumber+0x1d4>
    }
    else if(Cpy_Num==0)
    1db0:	89 89       	ldd	r24, Y+17	; 0x11
    1db2:	9a 89       	ldd	r25, Y+18	; 0x12
    1db4:	ab 89       	ldd	r26, Y+19	; 0x13
    1db6:	bc 89       	ldd	r27, Y+20	; 0x14
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	a1 05       	cpc	r26, r1
    1dbc:	b1 05       	cpc	r27, r1
    1dbe:	59 f4       	brne	.+22     	; 0x1dd6 <Lcd_VoidWriteNumber+0x122>
    {
    	store[i]='0';
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	ce 01       	movw	r24, r28
    1dc8:	03 96       	adiw	r24, 0x03	; 3
    1dca:	fc 01       	movw	r30, r24
    1dcc:	e2 0f       	add	r30, r18
    1dce:	f3 1f       	adc	r31, r19
    1dd0:	80 e3       	ldi	r24, 0x30	; 48
    1dd2:	80 83       	st	Z, r24
    1dd4:	59 c0       	rjmp	.+178    	; 0x1e88 <Lcd_VoidWriteNumber+0x1d4>
    }
    else if (Cpy_Num>0)
    1dd6:	89 89       	ldd	r24, Y+17	; 0x11
    1dd8:	9a 89       	ldd	r25, Y+18	; 0x12
    1dda:	ab 89       	ldd	r26, Y+19	; 0x13
    1ddc:	bc 89       	ldd	r27, Y+20	; 0x14
    1dde:	18 16       	cp	r1, r24
    1de0:	19 06       	cpc	r1, r25
    1de2:	1a 06       	cpc	r1, r26
    1de4:	1b 06       	cpc	r1, r27
    1de6:	0c f0       	brlt	.+2      	; 0x1dea <Lcd_VoidWriteNumber+0x136>
    1de8:	4f c0       	rjmp	.+158    	; 0x1e88 <Lcd_VoidWriteNumber+0x1d4>
    1dea:	42 c0       	rjmp	.+132    	; 0x1e70 <Lcd_VoidWriteNumber+0x1bc>
    {
    	while(Cpy_Num!=0)
        {
   	   	   store[i]=(Cpy_Num%10)+'0';
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	08 2f       	mov	r16, r24
    1df0:	10 e0       	ldi	r17, 0x00	; 0
    1df2:	89 89       	ldd	r24, Y+17	; 0x11
    1df4:	9a 89       	ldd	r25, Y+18	; 0x12
    1df6:	ab 89       	ldd	r26, Y+19	; 0x13
    1df8:	bc 89       	ldd	r27, Y+20	; 0x14
    1dfa:	2a e0       	ldi	r18, 0x0A	; 10
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 0e 11 	call	0x221c	; 0x221c <__divmodsi4>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	28 2f       	mov	r18, r24
    1e10:	20 5d       	subi	r18, 0xD0	; 208
    1e12:	ce 01       	movw	r24, r28
    1e14:	03 96       	adiw	r24, 0x03	; 3
    1e16:	fc 01       	movw	r30, r24
    1e18:	e0 0f       	add	r30, r16
    1e1a:	f1 1f       	adc	r31, r17
    1e1c:	20 83       	st	Z, r18
   	 	   Cpy_Num=(Cpy_Num-(Cpy_Num%10))/10;
    1e1e:	89 89       	ldd	r24, Y+17	; 0x11
    1e20:	9a 89       	ldd	r25, Y+18	; 0x12
    1e22:	ab 89       	ldd	r26, Y+19	; 0x13
    1e24:	bc 89       	ldd	r27, Y+20	; 0x14
    1e26:	2a e0       	ldi	r18, 0x0A	; 10
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	50 e0       	ldi	r21, 0x00	; 0
    1e2e:	bc 01       	movw	r22, r24
    1e30:	cd 01       	movw	r24, r26
    1e32:	0e 94 0e 11 	call	0x221c	; 0x221c <__divmodsi4>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	9c 01       	movw	r18, r24
    1e3c:	ad 01       	movw	r20, r26
    1e3e:	89 89       	ldd	r24, Y+17	; 0x11
    1e40:	9a 89       	ldd	r25, Y+18	; 0x12
    1e42:	ab 89       	ldd	r26, Y+19	; 0x13
    1e44:	bc 89       	ldd	r27, Y+20	; 0x14
    1e46:	82 1b       	sub	r24, r18
    1e48:	93 0b       	sbc	r25, r19
    1e4a:	a4 0b       	sbc	r26, r20
    1e4c:	b5 0b       	sbc	r27, r21
    1e4e:	2a e0       	ldi	r18, 0x0A	; 10
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	bc 01       	movw	r22, r24
    1e58:	cd 01       	movw	r24, r26
    1e5a:	0e 94 0e 11 	call	0x221c	; 0x221c <__divmodsi4>
    1e5e:	da 01       	movw	r26, r20
    1e60:	c9 01       	movw	r24, r18
    1e62:	89 8b       	std	Y+17, r24	; 0x11
    1e64:	9a 8b       	std	Y+18, r25	; 0x12
    1e66:	ab 8b       	std	Y+19, r26	; 0x13
    1e68:	bc 8b       	std	Y+20, r27	; 0x14
   		   i++;
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	8f 5f       	subi	r24, 0xFF	; 255
    1e6e:	8a 83       	std	Y+2, r24	; 0x02
    {
    	store[i]='0';
    }
    else if (Cpy_Num>0)
    {
    	while(Cpy_Num!=0)
    1e70:	89 89       	ldd	r24, Y+17	; 0x11
    1e72:	9a 89       	ldd	r25, Y+18	; 0x12
    1e74:	ab 89       	ldd	r26, Y+19	; 0x13
    1e76:	bc 89       	ldd	r27, Y+20	; 0x14
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	a1 05       	cpc	r26, r1
    1e7c:	b1 05       	cpc	r27, r1
    1e7e:	09 f0       	breq	.+2      	; 0x1e82 <Lcd_VoidWriteNumber+0x1ce>
    1e80:	b5 cf       	rjmp	.-150    	; 0x1dec <Lcd_VoidWriteNumber+0x138>
        {
   	   	   store[i]=(Cpy_Num%10)+'0';
   	 	   Cpy_Num=(Cpy_Num-(Cpy_Num%10))/10;
   		   i++;
   	    }
    	i--;
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	81 50       	subi	r24, 0x01	; 1
    1e86:	8a 83       	std	Y+2, r24	; 0x02
    }

   for(s8 y=i;y>=0;y--)
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	10 c0       	rjmp	.+32     	; 0x1eae <Lcd_VoidWriteNumber+0x1fa>
   {
	   Lcd_voidSendData(store[y]);
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	28 2f       	mov	r18, r24
    1e92:	33 27       	eor	r19, r19
    1e94:	27 fd       	sbrc	r18, 7
    1e96:	30 95       	com	r19
    1e98:	ce 01       	movw	r24, r28
    1e9a:	03 96       	adiw	r24, 0x03	; 3
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	e2 0f       	add	r30, r18
    1ea0:	f3 1f       	adc	r31, r19
    1ea2:	80 81       	ld	r24, Z
    1ea4:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Lcd_voidSendData>
   		   i++;
   	    }
    	i--;
    }

   for(s8 y=i;y>=0;y--)
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	81 50       	subi	r24, 0x01	; 1
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	88 23       	and	r24, r24
    1eb2:	6c f7       	brge	.-38     	; 0x1e8e <Lcd_VoidWriteNumber+0x1da>
   {
	   Lcd_voidSendData(store[y]);
   }
}
    1eb4:	64 96       	adiw	r28, 0x14	; 20
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	1f 91       	pop	r17
    1ec6:	0f 91       	pop	r16
    1ec8:	08 95       	ret

00001eca <main>:
#include "Dio_Interface.h"
#include "Lcd_Interface.h"
#include "KeyPad_Interface.h"

void main()
{
    1eca:	ef 92       	push	r14
    1ecc:	ff 92       	push	r15
    1ece:	0f 93       	push	r16
    1ed0:	1f 93       	push	r17
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	60 97       	sbiw	r28, 0x10	; 16
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	f8 94       	cli
    1ee0:	de bf       	out	0x3e, r29	; 62
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	cd bf       	out	0x3d, r28	; 61
    Lcd_Init();
    1ee6:	0e 94 cc 0b 	call	0x1798	; 0x1798 <Lcd_Init>
	KeyPad_voidInit();
    1eea:	0e 94 11 09 	call	0x1222	; 0x1222 <KeyPad_voidInit>
	u8 key,opr;
	u32 num1,num2,result;
    while(1)
    {
    	num1=0,num2=0,result=0,key=0;
    1eee:	19 86       	std	Y+9, r1	; 0x09
    1ef0:	1a 86       	std	Y+10, r1	; 0x0a
    1ef2:	1b 86       	std	Y+11, r1	; 0x0b
    1ef4:	1c 86       	std	Y+12, r1	; 0x0c
    1ef6:	1d 82       	std	Y+5, r1	; 0x05
    1ef8:	1e 82       	std	Y+6, r1	; 0x06
    1efa:	1f 82       	std	Y+7, r1	; 0x07
    1efc:	18 86       	std	Y+8, r1	; 0x08
    1efe:	19 82       	std	Y+1, r1	; 0x01
    1f00:	1a 82       	std	Y+2, r1	; 0x02
    1f02:	1b 82       	std	Y+3, r1	; 0x03
    1f04:	1c 82       	std	Y+4, r1	; 0x04
    1f06:	1e 86       	std	Y+14, r1	; 0x0e
    	Lcd_voidSendCommand(clear);
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	0e 94 ac 09 	call	0x1358	; 0x1358 <Lcd_voidSendCommand>
    	while(1)
    	{
    		key=KeyPad_u8GetPressedKey();
    1f0e:	0e 94 44 09 	call	0x1288	; 0x1288 <KeyPad_u8GetPressedKey>
    1f12:	8e 87       	std	Y+14, r24	; 0x0e
    		if(key==' ')
    1f14:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f16:	80 32       	cpi	r24, 0x20	; 32
    1f18:	59 f1       	breq	.+86     	; 0x1f70 <main+0xa6>
    			break;
    		Lcd_voidSendData(key);
    1f1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f1c:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Lcd_voidSendData>
    		num1*=10;
    1f20:	89 85       	ldd	r24, Y+9	; 0x09
    1f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f24:	ab 85       	ldd	r26, Y+11	; 0x0b
    1f26:	bc 85       	ldd	r27, Y+12	; 0x0c
    1f28:	2a e0       	ldi	r18, 0x0A	; 10
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e0       	ldi	r20, 0x00	; 0
    1f2e:	50 e0       	ldi	r21, 0x00	; 0
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	0e 94 cd 10 	call	0x219a	; 0x219a <__mulsi3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	89 87       	std	Y+9, r24	; 0x09
    1f3e:	9a 87       	std	Y+10, r25	; 0x0a
    1f40:	ab 87       	std	Y+11, r26	; 0x0b
    1f42:	bc 87       	std	Y+12, r27	; 0x0c
    		num1=num1+(key-'0');
    1f44:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f46:	88 2f       	mov	r24, r24
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	c0 97       	sbiw	r24, 0x30	; 48
    1f4c:	9c 01       	movw	r18, r24
    1f4e:	44 27       	eor	r20, r20
    1f50:	37 fd       	sbrc	r19, 7
    1f52:	40 95       	com	r20
    1f54:	54 2f       	mov	r21, r20
    1f56:	89 85       	ldd	r24, Y+9	; 0x09
    1f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5a:	ab 85       	ldd	r26, Y+11	; 0x0b
    1f5c:	bc 85       	ldd	r27, Y+12	; 0x0c
    1f5e:	82 0f       	add	r24, r18
    1f60:	93 1f       	adc	r25, r19
    1f62:	a4 1f       	adc	r26, r20
    1f64:	b5 1f       	adc	r27, r21
    1f66:	89 87       	std	Y+9, r24	; 0x09
    1f68:	9a 87       	std	Y+10, r25	; 0x0a
    1f6a:	ab 87       	std	Y+11, r26	; 0x0b
    1f6c:	bc 87       	std	Y+12, r27	; 0x0c
    1f6e:	cf cf       	rjmp	.-98     	; 0x1f0e <main+0x44>
    	}
    	opr=KeyPad_u8GetPressedKey();
    1f70:	0e 94 44 09 	call	0x1288	; 0x1288 <KeyPad_u8GetPressedKey>
    1f74:	8d 87       	std	Y+13, r24	; 0x0d
    	Lcd_voidSendData(opr);
    1f76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f78:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Lcd_voidSendData>
    	key=0;
    1f7c:	1e 86       	std	Y+14, r1	; 0x0e
    	while(1)
    	{
    		key=KeyPad_u8GetPressedKey();
    1f7e:	0e 94 44 09 	call	0x1288	; 0x1288 <KeyPad_u8GetPressedKey>
    1f82:	8e 87       	std	Y+14, r24	; 0x0e
    		if(key==' ')
    1f84:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f86:	80 32       	cpi	r24, 0x20	; 32
    1f88:	59 f1       	breq	.+86     	; 0x1fe0 <main+0x116>
    			break;
    		Lcd_voidSendData(key);
    1f8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f8c:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Lcd_voidSendData>
    		num2*=10;
    1f90:	8d 81       	ldd	r24, Y+5	; 0x05
    1f92:	9e 81       	ldd	r25, Y+6	; 0x06
    1f94:	af 81       	ldd	r26, Y+7	; 0x07
    1f96:	b8 85       	ldd	r27, Y+8	; 0x08
    1f98:	2a e0       	ldi	r18, 0x0A	; 10
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	50 e0       	ldi	r21, 0x00	; 0
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	cd 01       	movw	r24, r26
    1fa4:	0e 94 cd 10 	call	0x219a	; 0x219a <__mulsi3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	8d 83       	std	Y+5, r24	; 0x05
    1fae:	9e 83       	std	Y+6, r25	; 0x06
    1fb0:	af 83       	std	Y+7, r26	; 0x07
    1fb2:	b8 87       	std	Y+8, r27	; 0x08
    		num2=num2+(key-'0');
    1fb4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fb6:	88 2f       	mov	r24, r24
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	c0 97       	sbiw	r24, 0x30	; 48
    1fbc:	9c 01       	movw	r18, r24
    1fbe:	44 27       	eor	r20, r20
    1fc0:	37 fd       	sbrc	r19, 7
    1fc2:	40 95       	com	r20
    1fc4:	54 2f       	mov	r21, r20
    1fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fca:	af 81       	ldd	r26, Y+7	; 0x07
    1fcc:	b8 85       	ldd	r27, Y+8	; 0x08
    1fce:	82 0f       	add	r24, r18
    1fd0:	93 1f       	adc	r25, r19
    1fd2:	a4 1f       	adc	r26, r20
    1fd4:	b5 1f       	adc	r27, r21
    1fd6:	8d 83       	std	Y+5, r24	; 0x05
    1fd8:	9e 83       	std	Y+6, r25	; 0x06
    1fda:	af 83       	std	Y+7, r26	; 0x07
    1fdc:	b8 87       	std	Y+8, r27	; 0x08
    1fde:	cf cf       	rjmp	.-98     	; 0x1f7e <main+0xb4>
    	}
    	key=0;
    1fe0:	1e 86       	std	Y+14, r1	; 0x0e
    	Lcd_GoToXY(1,0);
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	60 e0       	ldi	r22, 0x00	; 0
    1fe6:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <Lcd_GoToXY>
        switch(opr)
    1fea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fec:	e8 2e       	mov	r14, r24
    1fee:	ff 24       	eor	r15, r15
    1ff0:	f8 8a       	std	Y+16, r15	; 0x10
    1ff2:	ef 86       	std	Y+15, r14	; 0x0f
    1ff4:	0f 85       	ldd	r16, Y+15	; 0x0f
    1ff6:	18 89       	ldd	r17, Y+16	; 0x10
    1ff8:	0b 32       	cpi	r16, 0x2B	; 43
    1ffa:	11 05       	cpc	r17, r1
    1ffc:	f1 f0       	breq	.+60     	; 0x203a <main+0x170>
    1ffe:	2f 85       	ldd	r18, Y+15	; 0x0f
    2000:	38 89       	ldd	r19, Y+16	; 0x10
    2002:	2c 32       	cpi	r18, 0x2C	; 44
    2004:	31 05       	cpc	r19, r1
    2006:	6c f4       	brge	.+26     	; 0x2022 <main+0x158>
    2008:	8f 85       	ldd	r24, Y+15	; 0x0f
    200a:	98 89       	ldd	r25, Y+16	; 0x10
    200c:	85 32       	cpi	r24, 0x25	; 37
    200e:	91 05       	cpc	r25, r1
    2010:	09 f4       	brne	.+2      	; 0x2014 <main+0x14a>
    2012:	97 c0       	rjmp	.+302    	; 0x2142 <main+0x278>
    2014:	0f 85       	ldd	r16, Y+15	; 0x0f
    2016:	18 89       	ldd	r17, Y+16	; 0x10
    2018:	0a 32       	cpi	r16, 0x2A	; 42
    201a:	11 05       	cpc	r17, r1
    201c:	09 f4       	brne	.+2      	; 0x2020 <main+0x156>
    201e:	70 c0       	rjmp	.+224    	; 0x2100 <main+0x236>
    2020:	b1 c0       	rjmp	.+354    	; 0x2184 <main+0x2ba>
    2022:	2f 85       	ldd	r18, Y+15	; 0x0f
    2024:	38 89       	ldd	r19, Y+16	; 0x10
    2026:	2d 32       	cpi	r18, 0x2D	; 45
    2028:	31 05       	cpc	r19, r1
    202a:	31 f1       	breq	.+76     	; 0x2078 <main+0x1ae>
    202c:	8f 85       	ldd	r24, Y+15	; 0x0f
    202e:	98 89       	ldd	r25, Y+16	; 0x10
    2030:	8f 32       	cpi	r24, 0x2F	; 47
    2032:	91 05       	cpc	r25, r1
    2034:	09 f4       	brne	.+2      	; 0x2038 <main+0x16e>
    2036:	43 c0       	rjmp	.+134    	; 0x20be <main+0x1f4>
    2038:	a5 c0       	rjmp	.+330    	; 0x2184 <main+0x2ba>
    	{
    	case'+':
    		result=num1+num2;
    203a:	29 85       	ldd	r18, Y+9	; 0x09
    203c:	3a 85       	ldd	r19, Y+10	; 0x0a
    203e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2040:	5c 85       	ldd	r21, Y+12	; 0x0c
    2042:	8d 81       	ldd	r24, Y+5	; 0x05
    2044:	9e 81       	ldd	r25, Y+6	; 0x06
    2046:	af 81       	ldd	r26, Y+7	; 0x07
    2048:	b8 85       	ldd	r27, Y+8	; 0x08
    204a:	82 0f       	add	r24, r18
    204c:	93 1f       	adc	r25, r19
    204e:	a4 1f       	adc	r26, r20
    2050:	b5 1f       	adc	r27, r21
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	9a 83       	std	Y+2, r25	; 0x02
    2056:	ab 83       	std	Y+3, r26	; 0x03
    2058:	bc 83       	std	Y+4, r27	; 0x04
    		Lcd_voidSendData('=');
    205a:	8d e3       	ldi	r24, 0x3D	; 61
    205c:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Lcd_voidSendData>
    		Lcd_VoidWriteNumber(result);
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	9a 81       	ldd	r25, Y+2	; 0x02
    2064:	ab 81       	ldd	r26, Y+3	; 0x03
    2066:	bc 81       	ldd	r27, Y+4	; 0x04
    2068:	bc 01       	movw	r22, r24
    206a:	cd 01       	movw	r24, r26
    206c:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <Lcd_VoidWriteNumber>
    		key=KeyPad_u8GetPressedKey();
    2070:	0e 94 44 09 	call	0x1288	; 0x1288 <KeyPad_u8GetPressedKey>
    2074:	8e 87       	std	Y+14, r24	; 0x0e
    2076:	3b cf       	rjmp	.-394    	; 0x1eee <main+0x24>
    	break;
    	case'-':
    		result=num1-num2;
    2078:	29 85       	ldd	r18, Y+9	; 0x09
    207a:	3a 85       	ldd	r19, Y+10	; 0x0a
    207c:	4b 85       	ldd	r20, Y+11	; 0x0b
    207e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2080:	8d 81       	ldd	r24, Y+5	; 0x05
    2082:	9e 81       	ldd	r25, Y+6	; 0x06
    2084:	af 81       	ldd	r26, Y+7	; 0x07
    2086:	b8 85       	ldd	r27, Y+8	; 0x08
    2088:	79 01       	movw	r14, r18
    208a:	8a 01       	movw	r16, r20
    208c:	e8 1a       	sub	r14, r24
    208e:	f9 0a       	sbc	r15, r25
    2090:	0a 0b       	sbc	r16, r26
    2092:	1b 0b       	sbc	r17, r27
    2094:	d8 01       	movw	r26, r16
    2096:	c7 01       	movw	r24, r14
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	9a 83       	std	Y+2, r25	; 0x02
    209c:	ab 83       	std	Y+3, r26	; 0x03
    209e:	bc 83       	std	Y+4, r27	; 0x04
    		Lcd_voidSendData('=');
    20a0:	8d e3       	ldi	r24, 0x3D	; 61
    20a2:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Lcd_voidSendData>
    		Lcd_VoidWriteNumber(result);
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	ab 81       	ldd	r26, Y+3	; 0x03
    20ac:	bc 81       	ldd	r27, Y+4	; 0x04
    20ae:	bc 01       	movw	r22, r24
    20b0:	cd 01       	movw	r24, r26
    20b2:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <Lcd_VoidWriteNumber>
    		key=KeyPad_u8GetPressedKey();
    20b6:	0e 94 44 09 	call	0x1288	; 0x1288 <KeyPad_u8GetPressedKey>
    20ba:	8e 87       	std	Y+14, r24	; 0x0e
    20bc:	18 cf       	rjmp	.-464    	; 0x1eee <main+0x24>
    	break;
    	case'/':
    		result=num1/num2;
    20be:	89 85       	ldd	r24, Y+9	; 0x09
    20c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c2:	ab 85       	ldd	r26, Y+11	; 0x0b
    20c4:	bc 85       	ldd	r27, Y+12	; 0x0c
    20c6:	2d 81       	ldd	r18, Y+5	; 0x05
    20c8:	3e 81       	ldd	r19, Y+6	; 0x06
    20ca:	4f 81       	ldd	r20, Y+7	; 0x07
    20cc:	58 85       	ldd	r21, Y+8	; 0x08
    20ce:	bc 01       	movw	r22, r24
    20d0:	cd 01       	movw	r24, r26
    20d2:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__udivmodsi4>
    20d6:	da 01       	movw	r26, r20
    20d8:	c9 01       	movw	r24, r18
    20da:	89 83       	std	Y+1, r24	; 0x01
    20dc:	9a 83       	std	Y+2, r25	; 0x02
    20de:	ab 83       	std	Y+3, r26	; 0x03
    20e0:	bc 83       	std	Y+4, r27	; 0x04
    		Lcd_voidSendData('=');
    20e2:	8d e3       	ldi	r24, 0x3D	; 61
    20e4:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Lcd_voidSendData>
    		Lcd_VoidWriteNumber(result);
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	9a 81       	ldd	r25, Y+2	; 0x02
    20ec:	ab 81       	ldd	r26, Y+3	; 0x03
    20ee:	bc 81       	ldd	r27, Y+4	; 0x04
    20f0:	bc 01       	movw	r22, r24
    20f2:	cd 01       	movw	r24, r26
    20f4:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <Lcd_VoidWriteNumber>
    		key=KeyPad_u8GetPressedKey();
    20f8:	0e 94 44 09 	call	0x1288	; 0x1288 <KeyPad_u8GetPressedKey>
    20fc:	8e 87       	std	Y+14, r24	; 0x0e
    20fe:	f7 ce       	rjmp	.-530    	; 0x1eee <main+0x24>
    	break;
    	case'*':
    		result=num1*num2;
    2100:	89 85       	ldd	r24, Y+9	; 0x09
    2102:	9a 85       	ldd	r25, Y+10	; 0x0a
    2104:	ab 85       	ldd	r26, Y+11	; 0x0b
    2106:	bc 85       	ldd	r27, Y+12	; 0x0c
    2108:	2d 81       	ldd	r18, Y+5	; 0x05
    210a:	3e 81       	ldd	r19, Y+6	; 0x06
    210c:	4f 81       	ldd	r20, Y+7	; 0x07
    210e:	58 85       	ldd	r21, Y+8	; 0x08
    2110:	bc 01       	movw	r22, r24
    2112:	cd 01       	movw	r24, r26
    2114:	0e 94 cd 10 	call	0x219a	; 0x219a <__mulsi3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	89 83       	std	Y+1, r24	; 0x01
    211e:	9a 83       	std	Y+2, r25	; 0x02
    2120:	ab 83       	std	Y+3, r26	; 0x03
    2122:	bc 83       	std	Y+4, r27	; 0x04
    		Lcd_voidSendData('=');
    2124:	8d e3       	ldi	r24, 0x3D	; 61
    2126:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Lcd_voidSendData>
    		Lcd_VoidWriteNumber(result);
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	ab 81       	ldd	r26, Y+3	; 0x03
    2130:	bc 81       	ldd	r27, Y+4	; 0x04
    2132:	bc 01       	movw	r22, r24
    2134:	cd 01       	movw	r24, r26
    2136:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <Lcd_VoidWriteNumber>
    		key=KeyPad_u8GetPressedKey();
    213a:	0e 94 44 09 	call	0x1288	; 0x1288 <KeyPad_u8GetPressedKey>
    213e:	8e 87       	std	Y+14, r24	; 0x0e
    2140:	d6 ce       	rjmp	.-596    	; 0x1eee <main+0x24>
    	break;
    	case'%':
    		result=num1%num2;
    2142:	89 85       	ldd	r24, Y+9	; 0x09
    2144:	9a 85       	ldd	r25, Y+10	; 0x0a
    2146:	ab 85       	ldd	r26, Y+11	; 0x0b
    2148:	bc 85       	ldd	r27, Y+12	; 0x0c
    214a:	2d 81       	ldd	r18, Y+5	; 0x05
    214c:	3e 81       	ldd	r19, Y+6	; 0x06
    214e:	4f 81       	ldd	r20, Y+7	; 0x07
    2150:	58 85       	ldd	r21, Y+8	; 0x08
    2152:	bc 01       	movw	r22, r24
    2154:	cd 01       	movw	r24, r26
    2156:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__udivmodsi4>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	9a 83       	std	Y+2, r25	; 0x02
    2162:	ab 83       	std	Y+3, r26	; 0x03
    2164:	bc 83       	std	Y+4, r27	; 0x04
    		Lcd_voidSendData('=');
    2166:	8d e3       	ldi	r24, 0x3D	; 61
    2168:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Lcd_voidSendData>
    		Lcd_VoidWriteNumber(result);
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	9a 81       	ldd	r25, Y+2	; 0x02
    2170:	ab 81       	ldd	r26, Y+3	; 0x03
    2172:	bc 81       	ldd	r27, Y+4	; 0x04
    2174:	bc 01       	movw	r22, r24
    2176:	cd 01       	movw	r24, r26
    2178:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <Lcd_VoidWriteNumber>
    		key=KeyPad_u8GetPressedKey();
    217c:	0e 94 44 09 	call	0x1288	; 0x1288 <KeyPad_u8GetPressedKey>
    2180:	8e 87       	std	Y+14, r24	; 0x0e
    2182:	b5 ce       	rjmp	.-662    	; 0x1eee <main+0x24>
    	break;
    	default:
    		Lcd_voidSendCommand(clear);
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	0e 94 ac 09 	call	0x1358	; 0x1358 <Lcd_voidSendCommand>
    		Lcd_VoidWriteString("wrong operator");
    218a:	80 e6       	ldi	r24, 0x60	; 96
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <Lcd_VoidWriteString>
    		key=KeyPad_u8GetPressedKey();
    2192:	0e 94 44 09 	call	0x1288	; 0x1288 <KeyPad_u8GetPressedKey>
    2196:	8e 87       	std	Y+14, r24	; 0x0e
    2198:	aa ce       	rjmp	.-684    	; 0x1eee <main+0x24>

0000219a <__mulsi3>:
    219a:	62 9f       	mul	r22, r18
    219c:	d0 01       	movw	r26, r0
    219e:	73 9f       	mul	r23, r19
    21a0:	f0 01       	movw	r30, r0
    21a2:	82 9f       	mul	r24, r18
    21a4:	e0 0d       	add	r30, r0
    21a6:	f1 1d       	adc	r31, r1
    21a8:	64 9f       	mul	r22, r20
    21aa:	e0 0d       	add	r30, r0
    21ac:	f1 1d       	adc	r31, r1
    21ae:	92 9f       	mul	r25, r18
    21b0:	f0 0d       	add	r31, r0
    21b2:	83 9f       	mul	r24, r19
    21b4:	f0 0d       	add	r31, r0
    21b6:	74 9f       	mul	r23, r20
    21b8:	f0 0d       	add	r31, r0
    21ba:	65 9f       	mul	r22, r21
    21bc:	f0 0d       	add	r31, r0
    21be:	99 27       	eor	r25, r25
    21c0:	72 9f       	mul	r23, r18
    21c2:	b0 0d       	add	r27, r0
    21c4:	e1 1d       	adc	r30, r1
    21c6:	f9 1f       	adc	r31, r25
    21c8:	63 9f       	mul	r22, r19
    21ca:	b0 0d       	add	r27, r0
    21cc:	e1 1d       	adc	r30, r1
    21ce:	f9 1f       	adc	r31, r25
    21d0:	bd 01       	movw	r22, r26
    21d2:	cf 01       	movw	r24, r30
    21d4:	11 24       	eor	r1, r1
    21d6:	08 95       	ret

000021d8 <__udivmodsi4>:
    21d8:	a1 e2       	ldi	r26, 0x21	; 33
    21da:	1a 2e       	mov	r1, r26
    21dc:	aa 1b       	sub	r26, r26
    21de:	bb 1b       	sub	r27, r27
    21e0:	fd 01       	movw	r30, r26
    21e2:	0d c0       	rjmp	.+26     	; 0x21fe <__udivmodsi4_ep>

000021e4 <__udivmodsi4_loop>:
    21e4:	aa 1f       	adc	r26, r26
    21e6:	bb 1f       	adc	r27, r27
    21e8:	ee 1f       	adc	r30, r30
    21ea:	ff 1f       	adc	r31, r31
    21ec:	a2 17       	cp	r26, r18
    21ee:	b3 07       	cpc	r27, r19
    21f0:	e4 07       	cpc	r30, r20
    21f2:	f5 07       	cpc	r31, r21
    21f4:	20 f0       	brcs	.+8      	; 0x21fe <__udivmodsi4_ep>
    21f6:	a2 1b       	sub	r26, r18
    21f8:	b3 0b       	sbc	r27, r19
    21fa:	e4 0b       	sbc	r30, r20
    21fc:	f5 0b       	sbc	r31, r21

000021fe <__udivmodsi4_ep>:
    21fe:	66 1f       	adc	r22, r22
    2200:	77 1f       	adc	r23, r23
    2202:	88 1f       	adc	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	1a 94       	dec	r1
    2208:	69 f7       	brne	.-38     	; 0x21e4 <__udivmodsi4_loop>
    220a:	60 95       	com	r22
    220c:	70 95       	com	r23
    220e:	80 95       	com	r24
    2210:	90 95       	com	r25
    2212:	9b 01       	movw	r18, r22
    2214:	ac 01       	movw	r20, r24
    2216:	bd 01       	movw	r22, r26
    2218:	cf 01       	movw	r24, r30
    221a:	08 95       	ret

0000221c <__divmodsi4>:
    221c:	97 fb       	bst	r25, 7
    221e:	09 2e       	mov	r0, r25
    2220:	05 26       	eor	r0, r21
    2222:	0e d0       	rcall	.+28     	; 0x2240 <__divmodsi4_neg1>
    2224:	57 fd       	sbrc	r21, 7
    2226:	04 d0       	rcall	.+8      	; 0x2230 <__divmodsi4_neg2>
    2228:	d7 df       	rcall	.-82     	; 0x21d8 <__udivmodsi4>
    222a:	0a d0       	rcall	.+20     	; 0x2240 <__divmodsi4_neg1>
    222c:	00 1c       	adc	r0, r0
    222e:	38 f4       	brcc	.+14     	; 0x223e <__divmodsi4_exit>

00002230 <__divmodsi4_neg2>:
    2230:	50 95       	com	r21
    2232:	40 95       	com	r20
    2234:	30 95       	com	r19
    2236:	21 95       	neg	r18
    2238:	3f 4f       	sbci	r19, 0xFF	; 255
    223a:	4f 4f       	sbci	r20, 0xFF	; 255
    223c:	5f 4f       	sbci	r21, 0xFF	; 255

0000223e <__divmodsi4_exit>:
    223e:	08 95       	ret

00002240 <__divmodsi4_neg1>:
    2240:	f6 f7       	brtc	.-4      	; 0x223e <__divmodsi4_exit>
    2242:	90 95       	com	r25
    2244:	80 95       	com	r24
    2246:	70 95       	com	r23
    2248:	61 95       	neg	r22
    224a:	7f 4f       	sbci	r23, 0xFF	; 255
    224c:	8f 4f       	sbci	r24, 0xFF	; 255
    224e:	9f 4f       	sbci	r25, 0xFF	; 255
    2250:	08 95       	ret

00002252 <__prologue_saves__>:
    2252:	2f 92       	push	r2
    2254:	3f 92       	push	r3
    2256:	4f 92       	push	r4
    2258:	5f 92       	push	r5
    225a:	6f 92       	push	r6
    225c:	7f 92       	push	r7
    225e:	8f 92       	push	r8
    2260:	9f 92       	push	r9
    2262:	af 92       	push	r10
    2264:	bf 92       	push	r11
    2266:	cf 92       	push	r12
    2268:	df 92       	push	r13
    226a:	ef 92       	push	r14
    226c:	ff 92       	push	r15
    226e:	0f 93       	push	r16
    2270:	1f 93       	push	r17
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	ca 1b       	sub	r28, r26
    227c:	db 0b       	sbc	r29, r27
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	09 94       	ijmp

0000228a <__epilogue_restores__>:
    228a:	2a 88       	ldd	r2, Y+18	; 0x12
    228c:	39 88       	ldd	r3, Y+17	; 0x11
    228e:	48 88       	ldd	r4, Y+16	; 0x10
    2290:	5f 84       	ldd	r5, Y+15	; 0x0f
    2292:	6e 84       	ldd	r6, Y+14	; 0x0e
    2294:	7d 84       	ldd	r7, Y+13	; 0x0d
    2296:	8c 84       	ldd	r8, Y+12	; 0x0c
    2298:	9b 84       	ldd	r9, Y+11	; 0x0b
    229a:	aa 84       	ldd	r10, Y+10	; 0x0a
    229c:	b9 84       	ldd	r11, Y+9	; 0x09
    229e:	c8 84       	ldd	r12, Y+8	; 0x08
    22a0:	df 80       	ldd	r13, Y+7	; 0x07
    22a2:	ee 80       	ldd	r14, Y+6	; 0x06
    22a4:	fd 80       	ldd	r15, Y+5	; 0x05
    22a6:	0c 81       	ldd	r16, Y+4	; 0x04
    22a8:	1b 81       	ldd	r17, Y+3	; 0x03
    22aa:	aa 81       	ldd	r26, Y+2	; 0x02
    22ac:	b9 81       	ldd	r27, Y+1	; 0x01
    22ae:	ce 0f       	add	r28, r30
    22b0:	d1 1d       	adc	r29, r1
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	ed 01       	movw	r28, r26
    22be:	08 95       	ret

000022c0 <_exit>:
    22c0:	f8 94       	cli

000022c2 <__stop_program>:
    22c2:	ff cf       	rjmp	.-2      	; 0x22c2 <__stop_program>
